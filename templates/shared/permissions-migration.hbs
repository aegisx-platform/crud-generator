import type { Knex } from 'knex';

/**
 * Migration: Add {{ModuleName}} permissions and roles
 * Generated by CRUD Generator on {{timestamp}}
 */

export async function up(knex: Knex): Promise<void> {
  console.log('🔐 Adding {{ModuleName}} permissions and roles...');

  // Insert permissions for {{moduleName}}
  const permissions = [
    {{#each permissions}}
    {
      description: '{{description}}', 
      resource: '{{resource}}',
      action: '{{action}}',
      created_at: new Date(),
      updated_at: new Date()
    }{{#unless @last}},{{/unless}}
    {{/each}}
  ];

  console.log(`📝 Inserting ${permissions.length} permissions for {{moduleName}}...`);
  await knex('permissions')
    .insert(permissions)
    .onConflict(['resource', 'action'])
    .ignore();

  // Insert roles for {{moduleName}}
  const roles = [
    {{#each roles}}
    {
      name: '{{name}}',
      description: '{{description}}',
      created_at: new Date(),
      updated_at: new Date()
    }{{#unless @last}},{{/unless}}
    {{/each}}
  ];

  console.log(`🏷️  Inserting ${roles.length} roles for {{moduleName}}...`);
  await knex('roles')
    .insert(roles)
    .onConflict('name')
    .ignore();

  // Link role permissions
  {{#each rolePermissions}}
  // {{roleName}} role permissions
  const {{@key}}Role = await knex('roles').where('name', '{{roleName}}').first();
  if ({{@key}}Role) {
    const {{@key}}Permissions = await knex('permissions')
      .where('resource', '{{../moduleName}}')
      .whereIn('action', {{#if permissionActions}}{{{permissionActions}}}{{else}}['create', 'read', 'update', 'delete']{{/if}})
      .select('id');
    
    if ({{@key}}Permissions.length > 0) {
      const rolePermissions = {{@key}}Permissions.map(p => ({
        role_id: {{@key}}Role.id,
        permission_id: p.id,
        created_at: new Date()
      }));

      console.log(`🔗 Linking ${ {{@key}}Permissions.length} permissions to {{roleName}} role...`);
      await knex('role_permissions')
        .insert(rolePermissions)
        .onConflict(['role_id', 'permission_id'])
        .ignore();
    }
  }
  {{/each}}

  console.log('✅ {{ModuleName}} permissions and roles added successfully');
}

export async function down(knex: Knex): Promise<void> {
  console.log('🗑️  Removing {{ModuleName}} permissions and roles...');

  // Remove role permissions first
  const roleIds = await knex('roles')
    .whereIn('name', [{{#each roles}}'{{name}}'{{#unless @last}}, {{/unless}}{{/each}}])
    .pluck('id');

  if (roleIds.length > 0) {
    console.log(`🔗 Removing role permissions for {{moduleName}}...`);
    await knex('role_permissions')
      .whereIn('role_id', roleIds)
      .del();
  }

  // Remove roles
  console.log(`🏷️  Removing {{moduleName}} role...`);
  const deletedRoles = await knex('roles')
    .whereIn('name', [{{#each roles}}'{{name}}'{{#unless @last}}, {{/unless}}{{/each}}])
    .del();

  // Remove permissions  
  console.log(`📝 Removing {{moduleName}} permissions...`);
  const deletedPermissions = await knex('permissions')
    .where('resource', '{{moduleName}}')
    .del();

  console.log(`✅ Removed ${deletedRoles} roles and ${deletedPermissions} permissions for {{moduleName}}`);
}