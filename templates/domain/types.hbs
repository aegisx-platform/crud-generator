// Import and re-export types from schemas for convenience
import {
  type {{ModuleName}},
  type Create{{ModuleName}},
  type Update{{ModuleName}},
  type {{ModuleName}}IdParam,
  type Get{{ModuleName}}Query,
  type List{{ModuleName}}Query{{#if withEvents}},
  type {{ModuleName}}CreatedEvent,
  type {{ModuleName}}UpdatedEvent,
  type {{ModuleName}}DeletedEvent{{/if}}
} from '../schemas/{{kebabCase currentRoute.camelName}}.schemas';

export {
  type {{ModuleName}},
  type Create{{ModuleName}},
  type Update{{ModuleName}},
  type {{ModuleName}}IdParam,
  type Get{{ModuleName}}Query,
  type List{{ModuleName}}Query{{#if withEvents}},
  type {{ModuleName}}CreatedEvent,
  type {{ModuleName}}UpdatedEvent,
  type {{ModuleName}}DeletedEvent{{/if}}
};

// Additional type definitions
export interface {{ModuleName}}Repository {
  create(data: Create{{ModuleName}}): Promise<{{ModuleName}}>;
  findById(id: number | string): Promise<{{ModuleName}} | null>;
  findMany(query: List{{ModuleName}}Query): Promise<{
    data: {{ModuleName}}[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
  }>;
  update(id: number | string, data: Update{{ModuleName}}): Promise<{{ModuleName}} | null>;
  delete(id: number | string): Promise<boolean>;
}

{{#if withEvents}}
// Real-time event type definitions
export interface {{ModuleName}}EventHandlers {
  onCreated?: (data: {{ModuleName}}) => void | Promise<void>;
  onUpdated?: (data: {{ModuleName}}) => void | Promise<void>;
  onDeleted?: (data: { id: number | string }) => void | Promise<void>;
}

export interface {{ModuleName}}WebSocketSubscription {
  subscribe(handlers: {{ModuleName}}EventHandlers): void;
  unsubscribe(): void;
}
{{/if}}

// Database entity type (matches database table structure exactly)
export interface {{ModuleName}}Entity {
  {{#each columns}}
  {{name}}: {{{raw tsType}}}{{#if isNullable}} | null{{/if}};
  {{/each}}
}