import { FastifyRequest, FastifyReply } from 'fastify';
import { Static } from '@sinclair/typebox';
import { {{ModuleName}}Service } from '../services/{{kebabCase currentRoute.camelName}}.service';
import { Create{{ModuleName}}, Update{{ModuleName}} } from '../types/{{kebabCase currentRoute.camelName}}.types';
import {
  Create{{ModuleName}}Schema,
  Update{{ModuleName}}Schema,
  {{ModuleName}}IdParamSchema,
  Get{{ModuleName}}QuerySchema,
  List{{ModuleName}}QuerySchema
} from '../schemas/{{kebabCase currentRoute.camelName}}.schemas';
{{#if (or (eq package 'enterprise') (eq package 'full'))}}
import { ExportQuerySchema } from '../../../schemas/export.schemas';
import { ExportService, ExportField } from '../../../services/export.service';
{{/if}}
{{#if (or (eq package 'enterprise') (eq package 'full'))}}
import {
  DropdownQuerySchema,
  BulkCreateSchema,
  BulkUpdateSchema,
  BulkDeleteSchema,{{#if hasStatusField}}
  BulkStatusSchema,
  StatusToggleSchema,{{/if}}{{#if (eq package 'full')}}
  ValidationRequestSchema,
  UniquenessCheckSchema{{/if}}
} from '../../../schemas/base.schemas';
{{/if}}

/**
 * {{ModuleName}} Controller
 * Package: {{package}}
 * Has Status Field: {{hasStatusField}}
 * 
 * Following Fastify controller patterns:
 * - Proper request/reply typing with Static<typeof Schema>
 * - Schema-based validation integration
 * - Structured error handling
 * - Logging integration with Fastify's logger
 */
export class {{ModuleName}}Controller {
  constructor(
    private {{moduleName}}Service: {{ModuleName}}Service{{#if (or (eq package 'enterprise') (eq package 'full'))}},
    private exportService: ExportService{{/if}}
  ) {}

  /**
   * Create new {{moduleName}}
   * POST /{{moduleName}}
   */
  async create(
    request: FastifyRequest<{ Body: Static<typeof Create{{ModuleName}}Schema> }>,
    reply: FastifyReply
  ) {
    request.log.info({ body: request.body }, 'Creating {{moduleName}}');

    // Transform API schema to domain model
    const createData = this.transformCreateSchema(request.body, request);
    
    const {{moduleName}} = await this.{{moduleName}}Service.create(createData);
    
    request.log.info({ {{moduleName}}Id: {{moduleName}}.id }, '{{ModuleName}} created successfully');

    return reply.code(201).success({{moduleName}}, '{{ModuleName}} created successfully');
  }

  /**
   * Get {{moduleName}} by ID
   * GET /{{moduleName}}/:id
   */
  async findOne(
    request: FastifyRequest<{
      Params: Static<typeof {{ModuleName}}IdParamSchema>;
      Querystring: Static<typeof Get{{ModuleName}}QuerySchema>;
    }>,
    reply: FastifyReply
  ) {
    const { id } = request.params;
    request.log.info({ {{moduleName}}Id: id }, 'Fetching {{moduleName}}');

    const {{moduleName}} = await this.{{moduleName}}Service.findById(id, request.query);

    return reply.success({{moduleName}});
  }

  /**
   * Get paginated list of {{moduleName}}s
   * GET /{{moduleName}}
   * Supports: ?fields=id,name&limit=100 (Security hardened)
   */
  async findMany(
    request: FastifyRequest<{ Querystring: Static<typeof List{{ModuleName}}QuerySchema> }>,
    reply: FastifyReply
  ) {
    request.log.info({ query: request.query }, 'Fetching {{moduleName}} list');

    // 🛡️ Security: Extract and validate parameters
    const { fields, ...queryParams } = request.query;
    
    // 🛡️ Security: Define allowed fields by role
    const SAFE_FIELDS = {
      public: ['id', '{{defaultLabelField}}', 'created_at'],
      user: ['id', '{{defaultLabelField}}', {{#each columns}}{{#unless (isSensitiveField this)}}'{{name}}', {{/unless}}{{/each}}'created_at'],
      admin: [{{#each columns}}'{{name}}', {{/each}}]
    };
    
    // 🛡️ Security: Get user role (default to public for safety)
    const userRole = request.user?.role || 'public';
    const allowedFields = SAFE_FIELDS[userRole] || SAFE_FIELDS.public;
    
    // 🛡️ Security: Filter requested fields against whitelist
    const safeFields = fields ? fields.filter(field => allowedFields.includes(field)) : undefined;
    
    // 🛡️ Security: Log suspicious requests
    if (fields && fields.some(field => !allowedFields.includes(field))) {
      request.log.warn({
        user: request.user?.id,
        requestedFields: fields,
        allowedFields,
        ip: request.ip
      }, 'Suspicious field access attempt detected');
    }

    // Get {{moduleName}} list with field filtering
    const result = await this.{{moduleName}}Service.findMany({
      ...queryParams,
      fields: safeFields
    });

    request.log.info({ 
      count: result.data.length, 
      total: result.pagination.total,
      fieldsRequested: fields?.length || 0,
      fieldsAllowed: safeFields?.length || 'all'
    }, '{{ModuleName}} list fetched');

    // Use raw send to match FlexibleSchema
    return reply.send({
      success: true,
      data: result.data,
      pagination: result.pagination,
      meta: {
        timestamp: new Date().toISOString(),
        version: 'v1',
        requestId: request.id,
        environment: process.env.NODE_ENV || 'development',
      },
    });
  }

  /**
   * Update {{moduleName}}
   * PUT /{{moduleName}}/:id
   */
  async update(
    request: FastifyRequest<{
      Params: Static<typeof {{ModuleName}}IdParamSchema>;
      Body: Static<typeof Update{{ModuleName}}Schema>;
    }>,
    reply: FastifyReply
  ) {
    const { id } = request.params;
    request.log.info({ {{moduleName}}Id: id, body: request.body }, 'Updating {{moduleName}}');

    // Transform API schema to domain model
    const updateData = this.transformUpdateSchema(request.body, request);
    
    const {{moduleName}} = await this.{{moduleName}}Service.update(id, updateData);

    request.log.info({ {{moduleName}}Id: id }, '{{ModuleName}} updated successfully');

    return reply.success({{moduleName}}, '{{ModuleName}} updated successfully');
  }

  /**
   * Delete {{moduleName}}
   * DELETE /{{moduleName}}/:id
   */
  async delete(
    request: FastifyRequest<{ Params: Static<typeof {{ModuleName}}IdParamSchema> }>,
    reply: FastifyReply
  ) {
    const { id } = request.params;
    request.log.info({ {{moduleName}}Id: id }, 'Deleting {{moduleName}}');

    const deleted = await this.{{moduleName}}Service.delete(id);

    if (!deleted) {
      return reply.code(404).error('NOT_FOUND', '{{ModuleName}} not found');
    }

    request.log.info({ {{moduleName}}Id: id }, '{{ModuleName}} deleted successfully');

    // Return operation result using standard success response
    return reply.success({
      id,
      deleted: true
    }, '{{ModuleName}} deleted successfully');
  }

{{#if (or (eq package 'enterprise') (eq package 'full'))}}
  
  // ===== ENHANCED CRUD METHODS =====
  
  /**
   * Get dropdown options
   * GET /{{moduleName}}/dropdown
   */
  async getDropdownOptions(
    request: FastifyRequest<{ Querystring: Static<typeof DropdownQuerySchema> }>,
    reply: FastifyReply
  ) {
    request.log.info({ query: request.query }, 'Fetching {{moduleName}} dropdown options');

    const result = await this.{{moduleName}}Service.getDropdownOptions(request.query);

    return reply.success({
      options: result.options,
      total: result.total
    });
  }

  /**
   * Bulk create {{moduleName}}s
   * POST /{{moduleName}}/bulk
   */
  async bulkCreate(
    request: FastifyRequest<{ Body: { items: Create{{ModuleName}}[]; options?: { skipDuplicates?: boolean; continueOnError?: boolean } } }>,
    reply: FastifyReply
  ) {
    request.log.info({ count: request.body.items.length }, 'Bulk creating {{moduleName}}s');

    // Transform API schema to domain model for each item
    const transformedData = {
      items: request.body.items.map(item => this.transformCreateSchema(item, request))
    };

    const result = await this.{{moduleName}}Service.bulkCreate(transformedData);

    return reply.code(201).success(result, `Bulk create completed: ${result.summary.successful} successful, ${result.summary.failed} failed`);
  }

  /**
   * Bulk update {{moduleName}}s
   * PUT /{{moduleName}}/bulk
   */
  async bulkUpdate(
    request: FastifyRequest<{ Body: { items: Array<{ id: string | number; data: Update{{ModuleName}} }> } }>,
    reply: FastifyReply
  ) {
    request.log.info({ count: request.body.items.length }, 'Bulk updating {{moduleName}}s');

    // Transform API schema to domain model for each item
    const transformedData = {
      items: request.body.items.map(item => ({
        id: item.id,
        data: this.transformUpdateSchema(item.data, request)
      }))
    };

    const result = await this.{{moduleName}}Service.bulkUpdate(transformedData);

    return reply.success(result, `Bulk update completed: ${result.summary.successful} successful, ${result.summary.failed} failed`);
  }

  /**
   * Bulk delete {{moduleName}}s
   * DELETE /{{moduleName}}/bulk
   */
  async bulkDelete(
    request: FastifyRequest<{ Body: Static<typeof BulkDeleteSchema> }>,
    reply: FastifyReply
  ) {
    request.log.info({ count: request.body.ids.length }, 'Bulk deleting {{moduleName}}s');

    const result = await this.{{moduleName}}Service.bulkDelete(request.body);

    return reply.success(result, `Bulk delete completed: ${result.summary.successful} successful, ${result.summary.failed} failed`);
  }

  {{#if hasStatusField}}
  /**
   * Bulk status update
   * PATCH /{{moduleName}}/bulk/status
   */
  async bulkUpdateStatus(
    request: FastifyRequest<{ Body: Static<typeof BulkStatusSchema> }>,
    reply: FastifyReply
  ) {
    request.log.info({ 
      count: request.body.ids.length, 
      status: request.body.status 
    }, 'Bulk updating {{moduleName}} status');

    // Convert status to boolean if it's a string
    const statusData = {
      ...request.body,
      status: typeof request.body.status === 'string' 
        ? request.body.status === 'true' || request.body.status === '1'
        : Boolean(request.body.status)
    };
    
    const result = await this.{{moduleName}}Service.bulkUpdateStatus(statusData);

    return reply.success(result, `Bulk status update completed: ${result.summary.successful} successful, ${result.summary.failed} failed`);
  }

  /**
   * Activate {{moduleName}}
   * PATCH /{{moduleName}}/:id/activate
   */
  async activate(
    request: FastifyRequest<{
      Params: Static<typeof {{ModuleName}}IdParamSchema>;
      Body: Static<typeof StatusToggleSchema>;
    }>,
    reply: FastifyReply
  ) {
    const { id } = request.params;
    request.log.info({ {{moduleName}}Id: id }, 'Activating {{moduleName}}');

    const result = await this.{{moduleName}}Service.activate(id, request.body);

    return reply.success(result, '{{ModuleName}} activated successfully');
  }

  /**
   * Deactivate {{moduleName}}
   * PATCH /{{moduleName}}/:id/deactivate
   */
  async deactivate(
    request: FastifyRequest<{
      Params: Static<typeof {{ModuleName}}IdParamSchema>;
      Body: Static<typeof StatusToggleSchema>;
    }>,
    reply: FastifyReply
  ) {
    const { id } = request.params;
    request.log.info({ {{moduleName}}Id: id }, 'Deactivating {{moduleName}}');

    const result = await this.{{moduleName}}Service.deactivate(id, request.body);

    return reply.success(result, '{{ModuleName}} deactivated successfully');
  }

  /**
   * Toggle {{moduleName}} status
   * PATCH /{{moduleName}}/:id/toggle
   */
  async toggle(
    request: FastifyRequest<{
      Params: Static<typeof {{ModuleName}}IdParamSchema>;
      Body: Static<typeof StatusToggleSchema>;
    }>,
    reply: FastifyReply
  ) {
    const { id } = request.params;
    request.log.info({ {{moduleName}}Id: id }, 'Toggling {{moduleName}} status');

    const result = await this.{{moduleName}}Service.toggle(id, request.body);

    return reply.success(result, '{{ModuleName}} status toggled successfully');
  }
  {{/if}}

  /**
   * Get statistics
   * GET /{{moduleName}}/stats
   */
  async getStats(
    request: FastifyRequest,
    reply: FastifyReply
  ) {
    request.log.info('Fetching {{moduleName}} statistics');

    const stats = await this.{{moduleName}}Service.getStats();

    return reply.success(stats);
  }

  /**
   * Export {{moduleName}} data
   * GET /{{moduleName}}/export
   */
  async export(
    request: FastifyRequest<{ Querystring: Static<typeof ExportQuerySchema> }>,
    reply: FastifyReply
  ) {
    const { format, ids, filters, fields, filename, includeMetadata = true, applyFilters = false } = request.query;
    
    request.log.info({ 
      format, 
      idsCount: ids?.length || 0,
      hasFilters: !!filters,
      fieldsCount: fields?.length || 0
    }, 'Exporting {{moduleName}} data');

    try {
      // Prepare query parameters based on export options
      let queryParams: any = {};
      
      // Apply specific IDs if provided
      if (ids && ids.length > 0) {
        queryParams.ids = ids;
      }
      
      // Apply filters if requested
      if (applyFilters && filters) {
        queryParams = { ...queryParams, ...filters };
      }

      // Get data from service
      const exportData = await this.{{moduleName}}Service.getExportData(queryParams, fields);
      
      // Prepare export fields configuration
      const exportFields = this.getExportFields(fields);
      
      // Generate export filename and clean any existing extensions
      let exportFilename = filename || this.generateExportFilename(format, ids?.length);
      
      // Remove any existing file extensions to prevent double extensions
      if (exportFilename.includes('.')) {
        exportFilename = exportFilename.substring(0, exportFilename.lastIndexOf('.'));
      }
      
      // Prepare metadata
      const metadata = includeMetadata ? {
        exportedBy: (request.user as any)?.username || (request.user as any)?.email || 'System',
        exportedAt: new Date(),
        filtersApplied: applyFilters ? filters : undefined,
        totalRecords: exportData.length,
        selectedRecords: ids?.length
      } : undefined;

      // Generate export file
      let buffer: Buffer;
      switch (format) {
        case 'csv':
          buffer = await this.exportService.exportToCsv({
            data: exportData,
            fields: exportFields,
            filename: exportFilename,
            metadata
          });
          break;
        case 'excel':
          buffer = await this.exportService.exportToExcel({
            data: exportData,
            fields: exportFields,
            filename: exportFilename,
            title: '{{ModuleName}} Export',
            metadata
          });
          break;
        case 'pdf':
          buffer = await this.exportService.exportToPdf({
            data: exportData,
            fields: exportFields,
            filename: exportFilename,
            title: '{{ModuleName}} Export - รายงาน{{displayName}}',
            metadata,
            pdfOptions: {
              template: 'professional',
              pageSize: 'A4',
              orientation: 'landscape',
              subtitle: 'Generated with Thai Font Support',
              logo: process.env.PDF_LOGO_URL
            }
          });
          break;
        default:
          return reply.code(400).error('INVALID_FORMAT', 'Unsupported export format');
      }

      // Set response headers for file download
      const mimeTypes = {
        csv: 'text/csv',
        excel: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        pdf: 'application/pdf'
      };

      const fileExtensions = {
        csv: 'csv',
        excel: 'xlsx',
        pdf: 'pdf'
      };

      reply
        .header('Content-Type', mimeTypes[format])
        .header('Content-Disposition', `attachment; filename="${exportFilename}.${fileExtensions[format]}"`)
        .header('Content-Length', buffer.length);

      request.log.info({ 
        format,
        filename: `${exportFilename}.${fileExtensions[format]}`,
        fileSize: buffer.length,
        recordCount: exportData.length
      }, '{{ModuleName}} export completed successfully');

      return reply.send(buffer);

    } catch (error) {
      request.log.error({ error, format }, 'Export failed');
      return reply
        .code(500)
        .send({
          success: false,
          error: {
            code: 'EXPORT_FAILED',
            message: `Export failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
            statusCode: 500,
          },
          meta: {
            timestamp: new Date().toISOString(),
            version: 'v1',
            requestId: request.id,
            environment: process.env.NODE_ENV || 'development',
          },
        });
    }
  }
{{/if}}

{{#if (eq package 'full')}}
  
  // ===== FULL PACKAGE METHODS =====
  
  /**
   * Validate data before save
   * POST /{{moduleName}}/validate
   */
  async validate(
    request: FastifyRequest<{ Body: { data: Static<typeof Create{{ModuleName}}Schema> } }>,
    reply: FastifyReply
  ) {
    request.log.info('Validating {{moduleName}} data');

    const result = await this.{{moduleName}}Service.validate(request.body);

    return reply.success(result);
  }

  /**
   * Check field uniqueness
   * GET /{{moduleName}}/check/:field
   */
  async checkUniqueness(
    request: FastifyRequest<{ 
      Params: { field: string };
      Querystring: Static<typeof UniquenessCheckSchema>; 
    }>,
    reply: FastifyReply
  ) {
    const { field } = request.params;
    request.log.info({ field, value: request.query.value }, 'Checking {{moduleName}} field uniqueness');

    const result = await this.{{moduleName}}Service.checkUniqueness(field, {
      value: String(request.query.value),
      excludeId: request.query.excludeId
    });

    return reply.success(result);
  }
{{/if}}

{{#if (or (eq package 'enterprise') (eq package 'full'))}}
  
  // ===== PRIVATE EXPORT HELPER METHODS =====

  /**
   * Get export fields configuration
   */
  private getExportFields(requestedFields?: string[]): ExportField[] {
    // Define all available fields for export
    const allFields: ExportField[] = [
      {{#each columns}}
      { key: '{{name}}', label: '{{#if label}}{{label}}{{else}}{{titleCase name}}{{/if}}', type: '{{getExportFieldType type}}' as 'string' | 'number' | 'date' | 'boolean' | 'json' },
      {{/each}}
    ];

    // Return requested fields or all fields
    if (requestedFields && requestedFields.length > 0) {
      return allFields.filter(field => requestedFields.includes(field.key));
    }

    return allFields;
  }

  /**
   * Generate export filename
   */
  private generateExportFilename(format: string, selectedCount?: number): string {
    const timestamp = new Date().toISOString().split('T')[0];
    const module = '{{kebabCase currentRoute.camelName}}';
    
    let suffix = '';
    if (selectedCount && selectedCount > 0) {
      suffix = `-selected-${selectedCount}`;
    }
    
    return `${module}-export${suffix}-${timestamp}`;
  }

{{/if}}
  // ===== PRIVATE TRANSFORMATION METHODS =====

  /**
   * Transform API create schema to domain model
   */
  private transformCreateSchema(schema: Static<typeof Create{{ModuleName}}Schema>, request: FastifyRequest) {
    const result: any = {
      // Transform snake_case API fields to camelCase domain fields
      {{#each columns}}
      {{#unless isPrimaryKey}}
      {{#unless (or (eq name 'created_at') (eq name 'updated_at') (eq name 'created_by') (eq name 'updated_by'))}}
      {{name}}: schema.{{name}},
      {{/unless}}
      {{/unless}}
      {{/each}}
    };

    // Auto-fill created_by from JWT if table has this field
    {{#each columns}}
    {{#if (eq name 'created_by')}}
    if (request.user?.id) {
      result.created_by = request.user.id;
    }
    {{/if}}
    {{/each}}

    return result;
  }

  /**
   * Transform API update schema to domain model  
   */
  private transformUpdateSchema(schema: Static<typeof Update{{ModuleName}}Schema>, request: FastifyRequest) {
    const updateData: any = {};
    
    {{#each columns}}
    {{#unless isPrimaryKey}}
    {{#unless (or (eq name 'created_at') (eq name 'updated_at') (eq name 'created_by') (eq name 'updated_by'))}}
    if (schema.{{name}} !== undefined) {
      updateData.{{name}} = schema.{{name}};
    }
    {{/unless}}
    {{/unless}}
    {{/each}}

    // Auto-fill updated_by from JWT if table has this field
    {{#each columns}}
    {{#if (eq name 'updated_by')}}
    if (request.user?.id) {
      updateData.updated_by = request.user.id;
    }
    {{/if}}
    {{/each}}
    
    return updateData;
  }
}