import { Component, inject, signal, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';

import { {{PascalCase}}Service } from '../services/{{kebabCase moduleName}}.service';
import { {{PascalCase}}, Update{{PascalCase}}Request } from '../types/{{typesFileName}}';
import { {{PascalCase}}FormComponent, {{PascalCase}}FormData } from './{{kebabCase moduleName}}-form.component';

export interface {{PascalCase}}EditDialogData {
  {{camelCase moduleName}}: {{PascalCase}};
}

@Component({
  selector: 'app-{{kebabCase moduleName}}-edit-dialog',
  standalone: true,
  imports: [
    CommonModule,
    MatDialogModule,
    {{PascalCase}}FormComponent,
  ],
  template: `
    <div class="edit-dialog">
      <h2 mat-dialog-title>Edit {{title}}</h2>
      
      <mat-dialog-content>
        <app-{{kebabCase moduleName}}-form
          mode="edit"
          [initialData]="data.{{camelCase moduleName}}"
          [loading]="loading()"
          (formSubmit)="onFormSubmit($event)"
          (formCancel)="onCancel()"
        ></app-{{kebabCase moduleName}}-form>
      </mat-dialog-content>
    </div>
  `,
  styles: [`
    .edit-dialog {
      min-width: 500px;
      max-width: 800px;
    }

    mat-dialog-content {
      max-height: 70vh;
      overflow-y: auto;
    }

    @media (max-width: 768px) {
      .edit-dialog {
        min-width: 90vw;
      }
    }
  `]
})
export class {{PascalCase}}EditDialogComponent implements OnInit {
  private {{camelCase moduleName}}Service = inject({{PascalCase}}Service);
  private snackBar = inject(MatSnackBar);
  private dialogRef = inject(MatDialogRef<{{PascalCase}}EditDialogComponent>);
  public data = inject<{{PascalCase}}EditDialogData>(MAT_DIALOG_DATA);

  loading = signal<boolean>(false);

  ngOnInit() {
    // No additional setup needed since shared form handles data population
  }

  async onFormSubmit(formData: {{PascalCase}}FormData) {
    this.loading.set(true);
    
    try {
      const updateRequest = formData as Update{{PascalCase}}Request;
      const result = await this.{{camelCase moduleName}}Service.update{{PascalCase}}(
        this.data.{{camelCase moduleName}}.id, 
        updateRequest
      );
      
      if (result) {
        this.snackBar.open('{{title}} updated successfully', 'Close', {
          duration: 3000,
        });
        this.dialogRef.close(result);
      } else {
        this.snackBar.open('Failed to update {{title}}', 'Close', {
          duration: 5000,
        });
      }
    } catch (error: any) {
      const errorMessage = this.{{camelCase moduleName}}Service.permissionError()
        ? 'You do not have permission to update {{title}}'
        : error?.message || 'Failed to update {{title}}';
      this.snackBar.open(
        errorMessage,
        'Close',
        {
          duration: 5000,
          panelClass: ['error-snackbar']
        }
      );
    } finally {
      this.loading.set(false);
    }
  }

  onCancel() {
    this.dialogRef.close();
  }
}