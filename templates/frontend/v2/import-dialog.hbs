import { CommonModule } from '@angular/common';
import { Component, inject, signal } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatTableModule } from '@angular/material/table';
import { MatChipsModule } from '@angular/material/chips';
import { FormsModule } from '@angular/forms';

import { {{PascalCase}}Service } from '../services/{{kebabCase}}.service';
import {
  ImportOptions,
  ValidateImportResponse,
  ImportJob,
  ImportRowPreview,
} from '../types/{{typesFileName}}';

type ImportStep = 'upload' | 'review' | 'options' | 'progress' | 'complete';

@Component({
  selector: 'app-{{kebabCase}}-import-dialog',
  standalone: true,
  imports: [
    CommonModule,
    MatDialogModule,
    MatButtonModule,
    MatIconModule,
    MatProgressBarModule,
    MatCheckboxModule,
    MatTableModule,
    MatChipsModule,
    FormsModule,
  ],
  template: `
    <div class="tremor-dialog-container">
      <!-- Header -->
      <div class="tremor-dialog-header bg-green-50">
        <div class="flex items-center gap-3">
          <div class="tremor-icon-wrapper tremor-icon-green">
            <mat-icon>upload_file</mat-icon>
          </div>
          <div>
            <h2 class="tremor-dialog-title">Bulk Import {{title}}</h2>
            <p class="tremor-dialog-subtitle">
              \{{ getStepTitle() }}
            </p>
          </div>
        </div>
        <button
          type="button"
          mat-icon-button
          class="tremor-close-button"
          [mat-dialog-close]="false"
          [disabled]="currentStep() === 'progress'"
        >
          <mat-icon>close</mat-icon>
        </button>
      </div>

      <!-- Step Indicator -->
      <div class="step-indicator">
        <div
          class="step"
          [class.active]="currentStep() === 'upload'"
          [class.completed]="isStepCompleted('upload')"
        >
          <div class="step-number">1</div>
          <span>Upload</span>
        </div>
        <div
          class="step-line"
          [class.completed]="isStepCompleted('upload')"
        ></div>
        <div
          class="step"
          [class.active]="currentStep() === 'review'"
          [class.completed]="isStepCompleted('review')"
        >
          <div class="step-number">2</div>
          <span>Review</span>
        </div>
        <div
          class="step-line"
          [class.completed]="isStepCompleted('review')"
        ></div>
        <div
          class="step"
          [class.active]="currentStep() === 'options'"
          [class.completed]="isStepCompleted('options')"
        >
          <div class="step-number">3</div>
          <span>Options</span>
        </div>
        <div
          class="step-line"
          [class.completed]="isStepCompleted('options')"
        ></div>
        <div
          class="step"
          [class.active]="
            currentStep() === 'progress' || currentStep() === 'complete'
          "
          [class.completed]="currentStep() === 'complete'"
        >
          <div class="step-number">4</div>
          <span>Import</span>
        </div>
      </div>

      <!-- Content -->
      <mat-dialog-content class="tremor-dialog-content">
        <!-- Step 1: Upload File -->
        @if (currentStep() === 'upload') {
          <div class="step-content">
            <div
              class="upload-area"
              (click)="fileInput.click()"
              (dragover)="onDragOver($event)"
              (drop)="onDrop($event)"
            >
              <mat-icon class="upload-icon">cloud_upload</mat-icon>
              <h3>Choose a file or drag it here</h3>
              <p class="text-gray-600">Excel (.xlsx, .xls) or CSV files only</p>
              <input
                #fileInput
                type="file"
                accept=".xlsx,.xls,.csv"
                (change)="onFileSelected($event)"
                hidden
              />
            </div>

            @if (selectedFile()) {
              <div class="file-selected">
                <mat-icon>description</mat-icon>
                <span>\{{ selectedFile()?.name }}</span>
                <button mat-icon-button (click)="clearFile()">
                  <mat-icon>close</mat-icon>
                </button>
              </div>
            }

            <div class="mt-6">
              <h4 class="text-sm font-semibold mb-2">Need a template?</h4>
              <div class="flex gap-2">
                <button mat-stroked-button (click)="downloadTemplate('excel')">
                  <mat-icon>download</mat-icon>
                  Download Excel Template
                </button>
                <button mat-stroked-button (click)="downloadTemplate('csv')">
                  <mat-icon>download</mat-icon>
                  Download CSV Template
                </button>
              </div>
            </div>

            @if (loading()) {
              <div class="mt-4">
                <mat-progress-bar mode="indeterminate"></mat-progress-bar>
                <p class="text-sm text-gray-600 mt-2">Validating file...</p>
              </div>
            }
          </div>
        }

        <!-- Step 2: Review Validation Results -->
        @if (currentStep() === 'review' && validationResult()) {
          <div class="step-content">
            <!-- Summary Cards -->
            <div class="grid grid-cols-4 gap-4 mb-6">
              <div class="stat-card">
                <div class="stat-value">
                  \{{ validationResult()?.totalRows }}
                </div>
                <div class="stat-label">Total Rows</div>
              </div>
              <div class="stat-card stat-success">
                <div class="stat-value">
                  \{{ validationResult()?.validRows }}
                </div>
                <div class="stat-label">Valid</div>
              </div>
              <div class="stat-card stat-error">
                <div class="stat-value">
                  \{{ validationResult()?.invalidRows }}
                </div>
                <div class="stat-label">Invalid</div>
              </div>
              <div class="stat-card stat-warning">
                <div class="stat-value">
                  \{{ validationResult()!.summary.duplicates }}
                </div>
                <div class="stat-label">Duplicates</div>
              </div>
            </div>

            <!-- Preview Table -->
            @if (
              validationResult()?.preview &&
              validationResult()!.preview.length > 0
            ) {
              <div class="preview-section">
                <h4 class="text-sm font-semibold mb-3">
                  Preview (First \{{ validationResult()!.preview.length }} rows)
                </h4>
                <div class="table-container">
                  <table
                    mat-table
                    [dataSource]="validationResult()!.preview"
                    class="preview-table"
                  >
                    <!-- Row Number Column -->
                    <ng-container matColumnDef="rowNumber">
                      <th mat-header-cell *matHeaderCellDef>Row</th>
                      <td mat-cell *matCellDef="let row">
                        \{{ row.rowNumber }}
                      </td>
                    </ng-container>

                    <!-- Status Column -->
                    <ng-container matColumnDef="status">
                      <th mat-header-cell *matHeaderCellDef>Status</th>
                      <td mat-cell *matCellDef="let row">
                        <mat-chip [class]="getStatusChipClass(row.status)">
                          \{{ row.status | titlecase }}
                        </mat-chip>
                      </td>
                    </ng-container>

                    <!-- Action Column -->
                    <ng-container matColumnDef="action">
                      <th mat-header-cell *matHeaderCellDef>Action</th>
                      <td mat-cell *matCellDef="let row">
                        <span
                          class="action-badge"
                          [class]="getActionBadgeClass(row.action)"
                        >
                          \{{ row.action | titlecase }}
                        </span>
                      </td>
                    </ng-container>

                    <!-- Data Columns -->
                    {{#each displayColumns}}
                    <ng-container matColumnDef="{{this.name}}">
                      <th mat-header-cell *matHeaderCellDef>{{this.label}}</th>
                      <td mat-cell *matCellDef="let row">
                        \{{ row.{{this.name}} }}
                      </td>
                    </ng-container>
                    {{/each}}

                    <!-- Errors Column -->
                    <ng-container matColumnDef="errors">
                      <th mat-header-cell *matHeaderCellDef>Issues</th>
                      <td mat-cell *matCellDef="let row">
                        @if (row.errors.length > 0) {
                          <div class="error-list">
                            @for (error of row.errors; track error.field) {
                              <div class="error-item">
                                <mat-icon class="error-icon">error</mat-icon>
                                <span
                                  >\{{ error.field }}: \{{ error.message }}</span
                                >
                              </div>
                            }
                          </div>
                        }
                        @if (row.warnings.length > 0) {
                          <div class="warning-list">
                            @for (
                              warning of row.warnings;
                              track warning.field
                            ) {
                              <div class="warning-item">
                                <mat-icon class="warning-icon"
                                  >warning</mat-icon
                                >
                                <span
                                  >\{{ warning.field }}:
                                  \{{ warning.message }}</span
                                >
                              </div>
                            }
                          </div>
                        }
                      </td>
                    </ng-container>

                    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
                    <tr
                      mat-row
                      *matRowDef="let row; columns: displayedColumns"
                      [class.error-row]="row.status === 'error'"
                    ></tr>
                  </table>
                </div>
              </div>
            }
          </div>
        }

        <!-- Step 3: Import Options -->
        @if (currentStep() === 'options') {
          <div class="step-content">
            <h4 class="text-lg font-semibold mb-4">Import Options</h4>

            <div class="options-grid">
              <div class="option-item">
                <mat-checkbox [(ngModel)]="importOptions.skipDuplicates">
                  Skip Duplicates
                </mat-checkbox>
                <p class="option-description">
                  Skip rows that already exist in the database
                </p>
              </div>

              <div class="option-item">
                <mat-checkbox [(ngModel)]="importOptions.updateExisting">
                  Update Existing
                </mat-checkbox>
                <p class="option-description">
                  Update existing records instead of skipping them
                </p>
              </div>

              <div class="option-item">
                <mat-checkbox [(ngModel)]="importOptions.continueOnError">
                  Continue on Error
                </mat-checkbox>
                <p class="option-description">
                  Continue importing even if some rows fail
                </p>
              </div>

              <div class="option-item">
                <mat-checkbox [(ngModel)]="importOptions.dryRun">
                  Dry Run
                </mat-checkbox>
                <p class="option-description">
                  Test the import without saving to database
                </p>
              </div>
            </div>

            <div class="import-summary mt-6">
              <h4 class="text-sm font-semibold mb-2">Import Summary</h4>
              <div class="summary-details">
                <div class="summary-row">
                  <span>Will Create:</span>
                  <strong>\{{
                    validationResult()!.summary.willCreate || 0
                  }}</strong>
                </div>
                <div class="summary-row">
                  <span>Will Update:</span>
                  <strong>\{{
                    importOptions.updateExisting
                      ? validationResult()!.summary.duplicates
                      : 0
                  }}</strong>
                </div>
                <div class="summary-row">
                  <span>Will Skip:</span>
                  <strong>\{{
                    validationResult()!.summary.willSkip || 0
                  }}</strong>
                </div>
              </div>
            </div>
          </div>
        }

        <!-- Step 4: Progress -->
        @if (currentStep() === 'progress' && importJob()) {
          <div class="step-content">
            <div class="progress-container">
              <mat-icon class="progress-icon spinning">sync</mat-icon>
              <h3>Importing {{title}}...</h3>
              <p class="text-gray-600">
                Please wait while we process your data
              </p>

              <div class="progress-stats">
                <div class="stat">
                  <span class="stat-label">Progress</span>
                  <span class="stat-value"
                    >\{{ importJob()!.progress.percentage }}%</span
                  >
                </div>
                <div class="stat">
                  <span class="stat-label">Processed</span>
                  <span class="stat-value"
                    >\{{ importJob()!.progress.current }} /
                    \{{ importJob()!.progress.total }}</span
                  >
                </div>
              </div>

              <mat-progress-bar
                mode="determinate"
                [value]="importJob()!.progress.percentage || 0"
                class="mt-4"
              >
              </mat-progress-bar>

              @if (importJob()?.estimatedCompletion) {
                <p class="text-sm text-gray-600 mt-2">
                  Estimated completion:
                  \{{ formatEstimatedTime(importJob()!.estimatedCompletion!) }}
                </p>
              }
            </div>
          </div>
        }

        <!-- Step 5: Complete -->
        @if (currentStep() === 'complete' && importJob()) {
          <div class="step-content">
            <div class="complete-container">
              <mat-icon
                class="complete-icon"
                [class.success]="importJob()?.status === 'completed'"
                [class.warning]="importJob()?.status === 'partial'"
              >
                \{{
                  importJob()?.status === 'completed'
                    ? 'check_circle'
                    : 'warning'
                }}
              </mat-icon>
              <h3>
                \{{
                  importJob()?.status === 'completed'
                    ? 'Import Completed!'
                    : 'Import Partially Completed'
                }}
              </h3>

              <div class="result-summary">
                <div class="result-row">
                  <span>Total Rows:</span>
                  <strong>\{{ importJob()!.summary.total }}</strong>
                </div>
                <div class="result-row success">
                  <span>Successful:</span>
                  <strong>\{{ importJob()!.summary.successful }}</strong>
                </div>
                @if (importJob()!.summary.created) {
                  <div class="result-row">
                    <span>Created:</span>
                    <strong>\{{ importJob()!.summary.created }}</strong>
                  </div>
                }
                @if (importJob()!.summary.updated) {
                  <div class="result-row">
                    <span>Updated:</span>
                    <strong>\{{ importJob()!.summary.updated }}</strong>
                  </div>
                }
                @if (hasFailed) {
                  <div class="result-row error">
                    <span>Failed:</span>
                    <strong>\{{ importJob()!.summary.failed }}</strong>
                  </div>
                }
                @if (hasSkipped) {
                  <div class="result-row">
                    <span>Skipped:</span>
                    <strong>\{{ importJob()!.summary.skipped }}</strong>
                  </div>
                }
                @if (importJob()?.duration) {
                  <div class="result-row">
                    <span>Duration:</span>
                    <strong>\{{
                      formatDuration(importJob()!.duration!)
                    }}</strong>
                  </div>
                }
              </div>

              @if (importJob()?.errors && importJob()!.errors.length > 0) {
                <div class="errors-section mt-4">
                  <h4 class="text-sm font-semibold mb-2">
                    Errors (\{{ importJob()!.errors.length }})
                  </h4>
                  <div class="errors-list">
                    @for (
                      error of importJob()!.errors.slice(0, 10);
                      track error.rowNumber
                    ) {
                      <div class="error-detail">
                        <strong>Row \{{ error.rowNumber }}:</strong>
                        \{{ error.field }} - \{{ error.message }}
                      </div>
                    }
                    @if (importJob()!.errors.length > 10) {
                      <p class="text-sm text-gray-600 mt-2">
                        ... and \{{ importJob()!.errors.length - 10 }} more
                        errors
                      </p>
                    }
                  </div>
                </div>
              }
            </div>
          </div>
        }
      </mat-dialog-content>

      <!-- Footer Actions -->
      <div class="tremor-dialog-footer">
        @if (currentStep() === 'upload') {
          <button mat-button (click)="onCancel()" [disabled]="loading()">
            Cancel
          </button>
          <button
            mat-raised-button
            color="primary"
            (click)="validateFile()"
            [disabled]="!selectedFile() || loading()"
          >
            <mat-icon>check</mat-icon>
            Validate File
          </button>
        }

        @if (currentStep() === 'review') {
          <button mat-button (click)="goToStep('upload')">Back</button>
          <button
            mat-raised-button
            color="primary"
            (click)="goToStep('options')"
            [disabled]="validationResult()?.validRows === 0"
          >
            <mat-icon>settings</mat-icon>
            Configure Options
          </button>
        }

        @if (currentStep() === 'options') {
          <button mat-button (click)="goToStep('review')">Back</button>
          <button
            mat-raised-button
            color="primary"
            (click)="executeImport()"
            [disabled]="loading()"
          >
            <mat-icon>play_arrow</mat-icon>
            Start Import
          </button>
        }

        @if (currentStep() === 'complete') {
          <button
            mat-raised-button
            color="primary"
            [mat-dialog-close]="importJob()"
          >
            <mat-icon>check</mat-icon>
            Done
          </button>
        }
      </div>
    </div>
  `,
  styles: [
    `
      .tremor-dialog-container {
        display: flex;
        flex-direction: column;
        min-width: 800px;
        max-width: 1000px;
        max-height: 90vh;
      }

      .tremor-dialog-header {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        padding: 1.5rem;
        border-bottom: 1px solid #e5e7eb;
      }

      .bg-green-50 {
        background: linear-gradient(to bottom, #ffffff, #f0fdf4);
      }

      .tremor-icon-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 3rem;
        height: 3rem;
        border-radius: 0.75rem;
      }

      .tremor-icon-green {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        box-shadow: 0 4px 6px -1px rgba(16, 185, 129, 0.3);
      }

      .tremor-dialog-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #111827;
      }

      .tremor-dialog-subtitle {
        margin: 0.25rem 0 0 0;
        font-size: 0.875rem;
        color: #6b7280;
      }

      .tremor-close-button {
        color: #6b7280;
      }

      .step-indicator {
        display: flex;
        align-items: center;
        padding: 1.5rem;
        background: #f9fafb;
        border-bottom: 1px solid #e5e7eb;
      }

      .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
      }

      .step-number {
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        background: #e5e7eb;
        color: #6b7280;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 0.875rem;
      }

      .step.active .step-number {
        background: #10b981;
        color: white;
      }

      .step.completed .step-number {
        background: #10b981;
        color: white;
      }

      .step span {
        font-size: 0.75rem;
        color: #6b7280;
        font-weight: 500;
      }

      .step.active span {
        color: #10b981;
        font-weight: 600;
      }

      .step-line {
        flex: 1;
        height: 2px;
        background: #e5e7eb;
        margin: 0 1rem;
      }

      .step-line.completed {
        background: #10b981;
      }

      .tremor-dialog-content {
        flex: 1;
        overflow-y: auto;
        padding: 2rem;
      }

      .step-content {
        max-width: 100%;
      }

      .upload-area {
        border: 2px dashed #d1d5db;
        border-radius: 0.5rem;
        padding: 3rem 2rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
      }

      .upload-area:hover {
        border-color: #10b981;
        background: #f0fdf4;
      }

      .upload-icon {
        font-size: 4rem;
        width: 4rem;
        height: 4rem;
        color: #10b981;
        margin-bottom: 1rem;
      }

      .file-selected {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: #f0fdf4;
        border-radius: 0.5rem;
        margin-top: 1rem;
      }

      .stat-card {
        padding: 1rem;
        background: white;
        border-radius: 0.5rem;
        border: 1px solid #e5e7eb;
        text-align: center;
      }

      .stat-card.stat-success {
        background: #f0fdf4;
        border-color: #10b981;
      }

      .stat-card.stat-error {
        background: #fef2f2;
        border-color: #ef4444;
      }

      .stat-card.stat-warning {
        background: #fffbeb;
        border-color: #f59e0b;
      }

      .stat-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #111827;
      }

      .stat-label {
        font-size: 0.875rem;
        color: #6b7280;
        margin-top: 0.25rem;
      }

      .table-container {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #e5e7eb;
        border-radius: 0.5rem;
      }

      .preview-table {
        width: 100%;
      }

      .error-row {
        background: #fef2f2 !important;
      }

      .error-list,
      .warning-list {
        font-size: 0.75rem;
      }

      .error-item,
      .warning-item {
        display: flex;
        align-items: center;
        gap: 0.25rem;
        margin-bottom: 0.25rem;
      }

      .error-icon {
        color: #ef4444;
        font-size: 1rem;
        width: 1rem;
        height: 1rem;
      }

      .warning-icon {
        color: #f59e0b;
        font-size: 1rem;
        width: 1rem;
        height: 1rem;
      }

      .action-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 600;
      }

      .action-badge.create {
        background: #dbeafe;
        color: #1e40af;
      }

      .action-badge.update {
        background: #fef3c7;
        color: #92400e;
      }

      .action-badge.skip {
        background: #f3f4f6;
        color: #6b7280;
      }

      .options-grid {
        display: grid;
        gap: 1.5rem;
      }

      .option-item {
        padding: 1rem;
        background: #f9fafb;
        border-radius: 0.5rem;
      }

      .option-description {
        margin: 0.5rem 0 0 2rem;
        font-size: 0.875rem;
        color: #6b7280;
      }

      .progress-container,
      .complete-container {
        text-align: center;
        padding: 2rem;
      }

      .progress-icon {
        font-size: 4rem;
        width: 4rem;
        height: 4rem;
        color: #10b981;
        margin-bottom: 1rem;
      }

      .spinning {
        animation: spin 2s linear infinite;
      }

      @keyframes spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      .complete-icon {
        font-size: 4rem;
        width: 4rem;
        height: 4rem;
        margin-bottom: 1rem;
      }

      .complete-icon.success {
        color: #10b981;
      }

      .complete-icon.warning {
        color: #f59e0b;
      }

      .result-summary {
        max-width: 400px;
        margin: 2rem auto;
        padding: 1rem;
        background: #f9fafb;
        border-radius: 0.5rem;
      }

      .result-row {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px solid #e5e7eb;
      }

      .result-row:last-child {
        border-bottom: none;
      }

      .result-row.success {
        color: #10b981;
      }

      .result-row.error {
        color: #ef4444;
      }

      .tremor-dialog-footer {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        padding: 1rem 1.5rem;
        border-top: 1px solid #e5e7eb;
        background: #f9fafb;
      }

      /* Utility classes */
      .flex {
        display: flex;
      }
      .items-center {
        align-items: center;
      }
      .gap-2 {
        gap: 0.5rem;
      }
      .gap-3 {
        gap: 0.75rem;
      }
      .gap-4 {
        gap: 1rem;
      }
      .grid {
        display: grid;
      }
      .grid-cols-4 {
        grid-template-columns: repeat(4, 1fr);
      }
      .mt-2 {
        margin-top: 0.5rem;
      }
      .mt-4 {
        margin-top: 1rem;
      }
      .mt-6 {
        margin-top: 1.5rem;
      }
      .mb-2 {
        margin-bottom: 0.5rem;
      }
      .mb-3 {
        margin-bottom: 0.75rem;
      }
      .mb-4 {
        margin-bottom: 1rem;
      }
      .mb-6 {
        margin-bottom: 1.5rem;
      }
      .text-sm {
        font-size: 0.875rem;
      }
      .text-lg {
        font-size: 1.125rem;
      }
      .font-semibold {
        font-weight: 600;
      }
      .text-gray-600 {
        color: #6b7280;
      }
    `,
  ],
})
export class {{PascalCase}}ImportDialogComponent {
  private {{camelCase}}Service = inject({{PascalCase}}Service);
  private snackBar = inject(MatSnackBar);
  private dialogRef = inject(MatDialogRef<{{PascalCase}}ImportDialogComponent>);

  currentStep = signal<ImportStep>('upload');
  loading = signal<boolean>(false);
  selectedFile = signal<File | null>(null);
  validationResult = signal<ValidateImportResponse | null>(null);
  importJob = signal<ImportJob | null>(null);

  importOptions: ImportOptions = {
    skipDuplicates: false,
    continueOnError: true,
    updateExisting: false,
    dryRun: false,
  };

  displayedColumns = [
    'rowNumber',
    'status',
    'action',
    {{#each displayColumns}}
    '{{this.name}}',
    {{/each}}
    'errors',
  ];

  private pollingInterval: any;

  getStepTitle(): string {
    const titles: Record<ImportStep, string> = {
      upload: 'Upload your file to get started',
      review: 'Review validation results',
      options: 'Configure import options',
      progress: 'Import in progress',
      complete: 'Import completed',
    };
    return titles[this.currentStep()];
  }

  isStepCompleted(step: ImportStep): boolean {
    const steps: ImportStep[] = [
      'upload',
      'review',
      'options',
      'progress',
      'complete',
    ];
    const currentIndex = steps.indexOf(this.currentStep());
    const stepIndex = steps.indexOf(step);
    return stepIndex < currentIndex;
  }

  onFileSelected(event: any): void {
    const file = event.target.files?.[0];
    if (file) {
      this.selectedFile.set(file);
    }
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault();
    event.stopPropagation();
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();
    event.stopPropagation();
    const file = event.dataTransfer?.files?.[0];
    if (file) {
      this.selectedFile.set(file);
    }
  }

  clearFile(): void {
    this.selectedFile.set(null);
  }

  downloadTemplate(format: 'csv' | 'excel'): void {
    this.{{camelCase}}Service.downloadImportTemplate(format, true).subscribe({
      next: (blob) => {
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `{{kebabCase}}-import-template.${format === 'excel' ? 'xlsx' : 'csv'}`;
        link.click();
        window.URL.revokeObjectURL(url);
        this.snackBar.open(`Template downloaded successfully`, 'Close', {
          duration: 3000,
        });
      },
      error: (error) => {
        this.snackBar.open('Failed to download template', 'Close', {
          duration: 5000,
        });
      },
    });
  }

  async validateFile(): Promise<void> {
    const file = this.selectedFile();
    if (!file) return;

    this.loading.set(true);

    try {
      const response = await this.{{camelCase}}Service.validateImportFile(file);

      if (response?.success && response.data) {
        this.validationResult.set(response.data);
        this.currentStep.set('review');
        this.snackBar.open('File validated successfully', 'Close', {
          duration: 3000,
        });
      }
    } catch (error: any) {
      this.snackBar.open(error?.message || 'Failed to validate file', 'Close', {
        duration: 5000,
      });
    } finally {
      this.loading.set(false);
    }
  }

  async executeImport(): Promise<void> {
    const validation = this.validationResult();
    if (!validation) return;

    this.loading.set(true);

    try {
      const response = await this.{{camelCase}}Service.executeImport(
        validation.sessionId,
        this.importOptions,
      );

      if (response?.success && response.data) {
        this.importJob.set(response.data);
        this.currentStep.set('progress');
        this.startPolling(response.data.jobId);
      }
    } catch (error: any) {
      this.snackBar.open(error?.message || 'Failed to start import', 'Close', {
        duration: 5000,
      });
    } finally {
      this.loading.set(false);
    }
  }

  private startPolling(jobId: string): void {
    this.pollingInterval = setInterval(async () => {
      try {
        const response = await this.{{camelCase}}Service.getImportStatus(jobId);

        if (response?.success && response.data) {
          this.importJob.set(response.data);

          if (
            response.data.status === 'completed' ||
            response.data.status === 'failed' ||
            response.data.status === 'partial'
          ) {
            this.stopPolling();
            this.currentStep.set('complete');

            if (response.data.status === 'completed') {
              this.snackBar.open('Import completed successfully!', 'Close', {
                duration: 5000,
              });
            } else if (response.data.status === 'partial') {
              this.snackBar.open(
                'Import partially completed with some errors',
                'Close',
                { duration: 5000 },
              );
            } else {
              this.snackBar.open('Import failed', 'Close', { duration: 5000 });
            }
          }
        }
      } catch (error) {
        console.error('Failed to poll import status:', error);
      }
    }, 2000); // Poll every 2 seconds
  }

  private stopPolling(): void {
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }
  }

  goToStep(step: ImportStep): void {
    this.currentStep.set(step);
  }

  getStatusChipClass(status: string): string {
    const classes: Record<string, string> = {
      valid: 'chip-success',
      warning: 'chip-warning',
      error: 'chip-error',
      duplicate: 'chip-info',
    };
    return classes[status] || '';
  }

  getActionBadgeClass(action: string): string {
    return action; // Uses CSS classes like .create, .update, .skip
  }

  formatEstimatedTime(isoString: string): string {
    const date = new Date(isoString);
    return date.toLocaleTimeString();
  }

  formatDuration(ms: number): string {
    const seconds = Math.floor(ms / 1000);
    if (seconds < 60) return `${seconds}s`;
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  }

  // Helper functions for safe property access
  get hasFailed(): boolean {
    const job = this.importJob();
    return !!(job?.summary?.failed && job.summary.failed > 0);
  }

  get hasSkipped(): boolean {
    const job = this.importJob();
    return !!(job?.summary?.skipped && job.summary.skipped > 0);
  }

  onCancel(): void {
    this.stopPolling();
    this.dialogRef.close();
  }

  ngOnDestroy(): void {
    this.stopPolling();
  }
}
