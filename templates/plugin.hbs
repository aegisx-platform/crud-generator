import fp from 'fastify-plugin';
import { FastifyInstance, FastifyPluginOptions } from 'fastify';
import { {{ModuleName}}Controller } from './{{moduleName}}.controller';
import { {{ModuleName}}Service } from './{{moduleName}}.service';
import { {{ModuleName}}Repository } from './{{moduleName}}.repository';
import { {{moduleName}}Routes } from './{{moduleName}}.routes';

// Note: FastifyInstance eventService type is declared in websocket.plugin.ts

/**
 * {{ModuleName}} Plugin
 * 
 * Following Fastify best practices:
 * - Service instantiation with proper dependency injection
 * - Encapsulation through plugin scoping
 * - Lifecycle management with hooks
 * - Schema registration through Fastify's schema registry
 */
export default fp(
  async function {{moduleName}}Plugin(
    fastify: FastifyInstance,
    options: FastifyPluginOptions
  ) {
    // Register schemas using Fastify's built-in schema registry
    if (fastify.hasDecorator('schemaRegistry')) {
      (fastify as any).schemaRegistry.registerModuleSchemas(
        '{{moduleName}}',
        {} // schemas will be imported automatically
      );
    }

    // Service instantiation following Fastify DI pattern
    // Dependencies are accessed from Fastify instance decorators
    const {{moduleName}}Repository = new {{ModuleName}}Repository((fastify as any).knex);
    const {{moduleName}}Service = new {{ModuleName}}Service(
      {{moduleName}}Repository{{#if withEvents}},
      (fastify as any).eventService{{/if}}
    );
    const {{moduleName}}Controller = new {{ModuleName}}Controller({{moduleName}}Service);

    // Optional: Decorate Fastify instance with service for cross-plugin access
    // fastify.decorate('{{moduleName}}Service', {{moduleName}}Service);

    // Register routes with controller dependency
    await fastify.register({{moduleName}}Routes, {
      controller: {{moduleName}}Controller,
      prefix: options.prefix || '/{{tableName}}'
    });

    // Lifecycle hooks for monitoring
    fastify.addHook('onReady', async () => {
      fastify.log.info(`{{ModuleName}} module registered successfully`);
    });

    {{#if withEvents}}
    // Cleanup event listeners on close
    fastify.addHook('onClose', async () => {
      fastify.log.info(`Cleaning up {{ModuleName}} module resources`);
      // Add any cleanup logic here
    });
    {{/if}}
  },
  {
    name: '{{moduleName}}-plugin',
    dependencies: ['knex-plugin'{{#if withEvents}}, 'websocket-plugin'{{/if}}]
  }
);