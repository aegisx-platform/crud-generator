import { BaseService } from '../../shared/services/base.service';
import { {{ModuleName}}Repository } from './{{moduleName}}.repository';
{{#if withEvents}}
import { EventService } from '../../shared/websocket/event.service';
import { CrudEventHelper } from '../../shared/websocket/crud-event-helper';
{{/if}}
import {
  type {{ModuleName}},
  type Create{{ModuleName}},
  type Update{{ModuleName}},
  type Get{{ModuleName}}Query,
  type List{{ModuleName}}Query
} from './{{moduleName}}.types';

/**
 * {{ModuleName}} Service
 * 
 * Following Fastify + BaseService pattern:
 * - Extends BaseService for standard CRUD operations
 * - Proper dependency injection through constructor
 * - Optional EventService integration for real-time features
 * - Business logic hooks for validation and processing
 */
export class {{ModuleName}}Service extends BaseService<{{ModuleName}}, Create{{ModuleName}}, Update{{ModuleName}}> {
  {{#if withEvents}}
  private eventHelper?: CrudEventHelper;
  {{/if}}

  constructor(
    private {{moduleName}}Repository: {{ModuleName}}Repository,
    {{#if withEvents}}private eventService?: EventService{{/if}}
  ) {
    super({{moduleName}}Repository);
    
    {{#if withEvents}}
    // Initialize event helper using Fastify pattern
    if (eventService) {
      this.eventHelper = eventService.for('{{moduleName}}', '{{moduleName}}');
    }
    {{/if}}
  }

  /**
   * Get {{moduleName}} by ID with optional query parameters
   */
  async findById(id: string | number, options: Get{{ModuleName}}Query = {}): Promise<{{ModuleName}} | null> {
    const {{moduleName}} = await this.getById(id);
    
    if ({{moduleName}}) {
      // Handle query options (includes, etc.)
      if (options.include) {
        // Add relationship loading logic here
      }
      
      {{#if withEvents}}
      // Emit read event for monitoring/analytics
      if (this.eventHelper) {
        await this.eventHelper.emitCustom('read', {{moduleName}});
      }
      {{/if}}
    }

    return {{moduleName}};
  }

  /**
   * Get paginated list with filtering and sorting
   */
  async findMany(options: List{{ModuleName}}Query = {}): Promise<{
    data: {{ModuleName}}[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
  }> {
    const result = await this.getList(options);
    
    {{#if withEvents}}
    // Emit bulk read event
    if (this.eventHelper) {
      await this.eventHelper.emitCustom('bulk_read', {
        count: result.data.length,
        filters: options
      });
    }
    {{/if}}
    
    return result;
  }

  /**
   * Create new {{moduleName}}
   */
  async create(data: Create{{ModuleName}}): Promise<{{ModuleName}}> {
    const {{moduleName}} = await super.create(data);
    
    {{#if withEvents}}
    // Emit created event for real-time updates
    if (this.eventHelper) {
      await this.eventHelper.emitCreated({{moduleName}});
    }
    {{/if}}
    
    return {{moduleName}};
  }

  /**
   * Update existing {{moduleName}}
   */
  async update(id: string | number, data: Update{{ModuleName}}): Promise<{{ModuleName}} | null> {
    const {{moduleName}} = await super.update(id, data);
    
    {{#if withEvents}}
    if ({{moduleName}} && this.eventHelper) {
      await this.eventHelper.emitUpdated({{moduleName}});
    }
    {{/if}}
    
    return {{moduleName}};
  }

  /**
   * Delete {{moduleName}}
   */
  async delete(id: string | number): Promise<boolean> {
    // Get entity before deletion for event emission
    const {{moduleName}} = await this.getById(id);
    
    const deleted = await super.delete(id);
    
    {{#if withEvents}}
    if (deleted && {{moduleName}} && this.eventHelper) {
      await this.eventHelper.emitDeleted({{moduleName}}.id);
    }
    {{/if}}
    
    return deleted;
  }

  // ===== BUSINESS LOGIC HOOKS =====
  // Override these methods in child classes for custom validation/processing

  /**
   * Validate data before creating {{moduleName}}
   */
  protected async validateCreate(data: Create{{ModuleName}}): Promise<void> {
    // Add custom validation logic here
    {{#each columns}}
    {{#if isRequired}}
    if (!data.{{toCamelCase name}}?.toString().trim()) {
      throw new Error('{{displayName}} is required');
    }
    {{/if}}
    {{/each}}

    // ===== ERROR HANDLING: DUPLICATE VALIDATION =====
    {{#if hasUniqueConstraints}}

    {{#each uniqueConstraints.singleField}}
    // Check for duplicate {{this}}
    if (data.{{toCamelCase this}}) {
      const existing = await this.{{../moduleName}}Repository.findBy{{toPascalCase this}}(data.{{toCamelCase this}});
      if (existing) {
        const error = new Error('{{titleCase this}} already exists') as any;
        error.statusCode = 409;
        error.code = '{{uppercase ../tableName}}_DUPLICATE_{{uppercase this}}';
        throw error;
      }
    }

    {{/each}}
    {{#each uniqueConstraints.composite}}
    // Check for duplicate composite key: {{#each this}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}
    {{#if this.[0]}}
    if ({{#each this}}data.{{toCamelCase this}}{{#unless @last}} && {{/unless}}{{/each}}) {
      const existing = await this.{{../../moduleName}}Repository.findBy{{#each this}}{{toPascalCase this}}{{#unless @last}}And{{/unless}}{{/each}}({ {{#each this}}{{toCamelCase this}}: data.{{toCamelCase this}}{{#unless @last}}, {{/unless}}{{/each}} });
      if (existing) {
        const error = new Error('{{#each this}}{{titleCase this}}{{#unless @last}} and {{/unless}}{{/each}} combination already exists') as any;
        error.statusCode = 409;
        error.code = '{{uppercase ../../tableName}}_DUPLICATE_{{#each this}}{{uppercase this}}{{#unless @last}}_{{/unless}}{{/each}}';
        throw error;
      }
    }
    {{/if}}

    {{/each}}
    {{/if}}

    // ===== ERROR HANDLING: BUSINESS RULES VALIDATION =====
    {{#if hasBusinessRules}}

    {{#each businessRules}}
    {{#if (eq type 'date_not_future')}}
    // Business rule: {{field}} cannot be in the future
    if (data.{{toCamelCase field}}) {
      const fieldDate = new Date(data.{{toCamelCase field}});
      const now = new Date();
      if (fieldDate > now) {
        const error = new Error('{{message}}') as any;
        error.statusCode = 422;
        error.code = '{{uppercase ../../tableName}}_{{errorCode}}_{{uppercase field}}';
        throw error;
      }
    }

    {{/if}}
    {{#if (eq type 'positive_number')}}
    // Business rule: {{field}} must be positive
    if (data.{{toCamelCase field}} !== undefined && data.{{toCamelCase field}} !== null) {
      if (data.{{toCamelCase field}} < 0) {
        const error = new Error('{{message}}') as any;
        error.statusCode = 422;
        error.code = '{{uppercase ../../tableName}}_{{errorCode}}_{{uppercase field}}';
        throw error;
      }
    }

    {{/if}}
    {{#if (eq type 'email_format')}}
    // Business rule: {{field}} must be valid email
    if (data.{{toCamelCase field}}) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(data.{{toCamelCase field}})) {
        const error = new Error('{{message}}') as any;
        error.statusCode = 422;
        error.code = '{{uppercase ../../tableName}}_{{errorCode}}_{{uppercase field}}';
        throw error;
      }
    }

    {{/if}}
    {{/each}}
    {{/if}}
  }

  /**
   * Process data before creation
   */
  protected async beforeCreate(data: Create{{ModuleName}}): Promise<Create{{ModuleName}}> {
    // Add custom business logic here
    return {
      ...data,
      // Add default values or processing
    };
  }

  /**
   * Execute logic after {{moduleName}} creation
   */
  protected async afterCreate({{moduleName}}: {{ModuleName}}, _originalData: Create{{ModuleName}}): Promise<void> {
    // Add post-creation logic (notifications, logging, etc.)
    console.log('{{ModuleName}} created:', JSON.stringify({{moduleName}}), '(ID: ' + {{moduleName}}.id + ')');
  }

  /**
   * Validate before deletion
   */
  protected async validateDelete(id: string | number, existing: {{ModuleName}}): Promise<void> {
    // Add deletion validation logic here
    // Example: Prevent deletion if entity has dependent records
    {{#each columns}}
    {{#if (eq name 'status')}}
    {{#if (or (eq tsType 'boolean') (eq type 'boolean'))}}
    if (existing.status === true) {
      throw new Error('Cannot delete active {{moduleName}}');
    }
    {{else}}
      {{#if (hasConstraints name)}}
        {{#with (getConstraintValue name 1)}}
    if (existing.status === '{{this}}') {
      throw new Error('Cannot delete {{this}} {{moduleName}}');
    }
        {{else}}
          {{#with (getConstraintValue name 0)}}
    if (existing.status && existing.status !== '{{this}}') {
      throw new Error('Cannot delete {{moduleName}} with current status');
    }
          {{/with}}
        {{/with}}
      {{else}}
    // No status constraints found - manual validation required
    if (existing.status) {
      throw new Error('Cannot delete {{moduleName}} - please verify status manually');
    }
      {{/if}}
    {{/if}}
    {{/if}}
    {{/each}}

    // ===== ERROR HANDLING: FOREIGN KEY REFERENCE VALIDATION =====
    {{#if hasForeignKeyReferences}}

    // Check if record can be deleted (has foreign key references)
    const deleteCheck = await this.{{moduleName}}Repository.canBeDeleted(id);

    if (!deleteCheck.canDelete) {
      const nonCascadeRefs = deleteCheck.blockedBy.filter(ref => !ref.cascade);

      if (nonCascadeRefs.length > 0) {
        // Build detailed error message
        const refDetails = nonCascadeRefs.map(ref => `${ref.count} ${ref.table}`).join(', ');
        const error = new Error(`Cannot delete {{moduleName}} - has ${refDetails} references`) as any;
        error.statusCode = 422;
        error.code = '{{uppercase tableName}}_CANNOT_DELETE_HAS_REFERENCES';
        error.details = {
          references: deleteCheck.blockedBy
        };
        throw error;
      }
    }

    {{/if}}
  }

{{#if (or (eq package 'enterprise') (eq package 'full'))}}

  // ===== ENHANCED CRUD METHODS =====

  /**
   * Get dropdown options for UI components
   */
  async getDropdownOptions(options: any = {}): Promise<{
    options: Array<{ value: string | number; label: string; disabled?: boolean }>;
    total: number;
  }> {
    const { limit = 100, search, labelField = '{{defaultLabelField}}', valueField = 'id' } = options;
    
    const result = await this.repository.list({
      limit,
      search,
      sort: `${labelField}:asc`
    });

    const dropdownOptions = result.data.map(item => ({
      value: item[valueField],
      label: item[labelField] || `${item.id}`,
      {{#if hasStatusField}}disabled: item.is_active === false{{else}}disabled: false{{/if}}
    }));

    return {
      options: dropdownOptions,
      total: result.pagination.total
    };
  }

  /**
   * Bulk create multiple {{moduleName}}s
   */
  async bulkCreate(data: { items: Array<{ original: any; transformed: Create{{ModuleName}} }> | Create{{ModuleName}}[] }): Promise<{
    created: {{ModuleName}}[];
    summary: { successful: number; failed: number; errors: any[] };
  }> {
    const results: {{ModuleName}}[] = [];
    const errors: any[] = [];

    // Handle both new format (with original data) and old format (backwards compatibility)
    const itemsToProcess = data.items.map(item => {
      if (typeof item === 'object' && 'original' in item && 'transformed' in item) {
        // New format from controller
        return { original: item.original, toCreate: item.transformed };
      } else {
        // Old format - backwards compatibility
        return { original: item, toCreate: item as Create{{ModuleName}} };
      }
    });

    // Process each item individually
    for (const { original, toCreate } of itemsToProcess) {
      try {
        // Validate and process
        await this.validateCreate(toCreate);
        const processed = await this.beforeCreate(toCreate);
        
        // Create in database
        const created = await this.repository.create(processed);
        results.push(created);
        
        // Call afterCreate hook
        try {
          await this.afterCreate(created, original);
        } catch (error) {
          console.warn('Error in afterCreate:', error);
        }

        {{#if withEvents}}
        if (this.eventHelper) {
          await this.eventHelper.emitCreated(created);
        }
        {{/if}}
      } catch (error) {
        console.log('⚠️ BULK CREATE ERROR - Item failed:', {
          name: original.name || 'unknown',
          {{#if displayNameField}}{{displayNameField}}: original.{{displayNameField}} || 'unknown',{{else}}id: original.id || 'unknown',{{/if}}
          error: error instanceof Error ? error.message.substring(0, 100) + '...' : String(error)
        });
        errors.push({
          item: original, // Include the original data that failed
          error: error instanceof Error ? error.message : String(error),
        });
      }
    }

    return {
      created: results,
      summary: {
        successful: results.length,
        failed: errors.length,
        errors,
      },
    };
  }

  /**
   * Bulk update multiple {{moduleName}}s
   */
  async bulkUpdate(data: { items: Array<{ id: string | number; data: Update{{ModuleName}} }> }): Promise<{
    updated: {{ModuleName}}[];
    summary: { successful: number; failed: number; errors: any[] };
  }> {
    const results: {{ModuleName}}[] = [];
    const errors: any[] = [];

    for (const item of data.items) {
      try {
        const updated = await this.update(item.id, item.data);
        if (updated) {
          results.push(updated);
        }
      } catch (error) {
        errors.push({
          item,
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }

    return {
      updated: results,
      summary: {
        successful: results.length,
        failed: errors.length,
        errors
      }
    };
  }

  /**
   * Bulk delete multiple {{moduleName}}s
   */
  async bulkDelete(data: { ids: Array<string | number> }): Promise<{
    deleted: Array<string | number>;
    summary: { successful: number; failed: number; errors: any[] };
  }> {
    const results: Array<string | number> = [];
    const errors: any[] = [];

    for (const id of data.ids) {
      try {
        const deleted = await this.delete(id);
        if (deleted) {
          results.push(id);
        }
      } catch (error) {
        errors.push({
          id,
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }

    return {
      deleted: results,
      summary: {
        successful: results.length,
        failed: errors.length,
        errors
      }
    };
  }

  {{#if hasStatusField}}
  /**
   * Bulk update status for multiple {{moduleName}}s
   */
  async bulkUpdateStatus(data: { ids: Array<string | number>; status: boolean }): Promise<{
    updated: {{ModuleName}}[];
    summary: { successful: number; failed: number; errors: any[] };
  }> {
    const results: {{ModuleName}}[] = [];
    const errors: any[] = [];

    for (const id of data.ids) {
      try {
        const updated = await this.update(id, { is_active: data.status } as Update{{ModuleName}});
        if (updated) {
          results.push(updated);
        }
      } catch (error) {
        errors.push({
          id,
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }

    return {
      updated: results,
      summary: {
        successful: results.length,
        failed: errors.length,
        errors
      }
    };
  }

  /**
   * Activate {{moduleName}}
   */
  async activate(id: string | number, options: any = {}): Promise<{{ModuleName}} | null> {
    return this.update(id, { is_active: true } as Update{{ModuleName}});
  }

  /**
   * Deactivate {{moduleName}}
   */
  async deactivate(id: string | number, options: any = {}): Promise<{{ModuleName}} | null> {
    return this.update(id, { is_active: false } as Update{{ModuleName}});
  }

  /**
   * Toggle {{moduleName}} status
   */
  async toggle(id: string | number, options: any = {}): Promise<{{ModuleName}} | null> {
    const current = await this.getById(id);
    if (!current) return null;

    const newStatus = !current.is_active;
    return this.update(id, { is_active: newStatus } as Update{{ModuleName}});
  }
  {{/if}}

  /**
   * Get statistics
   */
  async getStats(): Promise<{
    total: number;
    active: number;
    inactive: number;
    percentages?: {
      active: number;
      inactive: number;
    };
  }> {
    return this.repository.getStats();
  }
{{/if}}

{{#if (eq package 'full')}}

  // ===== FULL PACKAGE METHODS =====

  /**
   * Validate data before save
   */
  async validate(data: { data: Create{{ModuleName}} }): Promise<{
    valid: boolean;
    errors: Array<{ field: string; message: string }>;
  }> {
    const errors: Array<{ field: string; message: string }> = [];

    try {
      await this.validateCreate(data.data);
    } catch (error) {
      errors.push({
        field: 'general',
        message: error instanceof Error ? error.message : String(error)
      });
    }

    // Add specific field validations
    {{#each columns}}
    {{#if isRequired}}
    if (!data.data.{{name}}) {
      errors.push({
        field: '{{name}}',
        message: '{{displayName}} is required'
      });
    }
    {{/if}}
    {{/each}}

    return {
      valid: errors.length === 0,
      errors
    };
  }

  /**
   * Check field uniqueness
   */
  async checkUniqueness(field: string, options: { value: string; excludeId?: string | number }): Promise<{
    unique: boolean;
    exists?: any;
  }> {
    const query: any = { [field]: options.value };
    
    // Add exclusion for updates
    if (options.excludeId) {
      query.excludeId = options.excludeId;
    }

    const existing = await this.repository.findOne(query);
    
    return {
      unique: !existing,
      exists: existing || undefined
    };
  }
{{/if}}
}