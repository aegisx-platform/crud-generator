import { FastifyInstance, FastifyPluginOptions } from 'fastify';
import { Type } from '@sinclair/typebox';
import { {{ModuleName}}Controller } from '../controllers/{{toKebabCase currentRoute.camelName}}.controller';
import {
  Create{{ModuleName}}Schema,
  Update{{ModuleName}}Schema,
  {{ModuleName}}IdParamSchema,
  Get{{ModuleName}}QuerySchema,
  List{{ModuleName}}QuerySchema,
  {{ModuleName}}ResponseSchema,
  {{ModuleName}}ListResponseSchema,
  Flexible{{ModuleName}}ListResponseSchema,
} from '../schemas/{{toKebabCase currentRoute.camelName}}.schemas';
{{#if (or (eq package 'enterprise') (eq package 'full'))}}
import {
  DropdownQuerySchema,
  DropdownResponseSchema,
  BulkCreateSchema,
  BulkUpdateSchema,
  BulkDeleteSchema,
  BulkResponseSchema,{{#if hasStatusField}}
  BulkStatusSchema,
  StatusToggleSchema,{{/if}}{{#if (eq package 'full')}}
  ValidationRequestSchema,
  ValidationResponseSchema,
  UniquenessParamSchema,
  UniquenessQuerySchema,
  UniquenessResponseSchema,{{/if}}
  StatisticsResponseSchema
} from '../../../schemas/base.schemas';
import { ExportQuerySchema } from '../../../schemas/export.schemas';
{{/if}}
import { ApiErrorResponseSchema as ErrorResponseSchema } from '../../../schemas/base.schemas';
import { SchemaRefs } from '../../../schemas/registry';

export interface {{ModuleName}}RoutesOptions extends FastifyPluginOptions {
  controller: {{ModuleName}}Controller;
}

export async function {{currentRoute.camelName}}Routes(
  fastify: FastifyInstance,
  options: {{ModuleName}}RoutesOptions
) {
  const { controller } = options;

  // Create {{moduleName}}
  fastify.post('/', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Create a new {{moduleName}}',
      description: 'Create a new {{moduleName}} with the provided data',
      body: Create{{ModuleName}}Schema,
      response: {
        201: {{ModuleName}}ResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        409: SchemaRefs.Conflict,
        422: SchemaRefs.UnprocessableEntity,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}', 'admin'])
    ], // Authentication & authorization required
    handler: controller.create.bind(controller)
  });

{{#if (or (eq package 'enterprise') (eq package 'full'))}}
  // ⚠️ IMPORTANT: Export route must be BEFORE /:id route
  // Export {{moduleName}} data
  fastify.get('/export', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Export {{moduleName}} data',
      description: 'Export {{moduleName}} data in various formats (CSV, Excel, PDF)',
      querystring: ExportQuerySchema,
      response: {
        200: {
          description: 'Export file download',
          type: 'string',
          format: 'binary'
        },
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.read', '{{moduleName}}.export', 'admin'])
    ],
    handler: controller.export.bind(controller)
  });
{{/if}}

  // Get {{moduleName}} by ID
  fastify.get('/:id', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Get {{moduleName}} by ID',
      description: 'Retrieve a {{moduleName}} by its unique identifier',
      params: {{ModuleName}}IdParamSchema,
      querystring: Get{{ModuleName}}QuerySchema,
      response: {
        200: {{ModuleName}}ResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        404: SchemaRefs.NotFound,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.read', 'admin'])
    ], // Authentication & authorization required
    handler: controller.findOne.bind(controller)
  });

  // Get all {{moduleName}}s
  fastify.get('/', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Get all {{moduleName}}s with pagination and formats',
      description: 'Retrieve {{moduleName}}s with flexible formatting: ?format=dropdown for UI components, ?format=minimal for lightweight data, ?fields=id,name for custom field selection',
      querystring: List{{ModuleName}}QuerySchema,
      response: {
        200: Flexible{{ModuleName}}ListResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.read', 'admin'])
    ], // Authentication & authorization required
    handler: controller.findMany.bind(controller)
  });

  // Update {{moduleName}}
  fastify.put('/:id', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Update {{moduleName}} by ID',
      description: 'Update an existing {{moduleName}} with new data',
      params: {{ModuleName}}IdParamSchema,
      body: Update{{ModuleName}}Schema,
      response: {
        200: {{ModuleName}}ResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        404: SchemaRefs.NotFound,
        409: SchemaRefs.Conflict,
        422: SchemaRefs.UnprocessableEntity,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.update', 'admin'])
    ], // Authentication & authorization required
    handler: controller.update.bind(controller)
  });

  // Delete {{moduleName}}
  fastify.delete('/:id', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Delete {{moduleName}} by ID',
      description: 'Delete a {{moduleName}} by its unique identifier',
      params: {{ModuleName}}IdParamSchema,
      response: {
        200: SchemaRefs.OperationResult,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        404: SchemaRefs.NotFound,
        422: SchemaRefs.UnprocessableEntity,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.delete', 'admin'])
    ], // Authentication & authorization required
    handler: controller.delete.bind(controller)
  });

{{#if (or (eq package 'enterprise') (eq package 'full'))}}

  // ===== ENHANCED CRUD ROUTES =====

  // Get dropdown options for UI components
  fastify.get('/dropdown', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Get {{moduleName}} dropdown options',
      description: 'Get {{moduleName}} options for dropdown/select components',
      querystring: DropdownQuerySchema,
      response: {
        200: DropdownResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.read', 'admin'])
    ],
    handler: controller.getDropdownOptions.bind(controller)
  });

  // Bulk create {{moduleName}}s
  fastify.post('/bulk', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Bulk create {{moduleName}}s',
      description: 'Create multiple {{moduleName}}s in one operation',
      body: BulkCreateSchema(Create{{ModuleName}}Schema),
      response: {
        201: BulkResponseSchema({{ModuleName}}ResponseSchema),
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.create', 'admin'])
    ],
    handler: controller.bulkCreate.bind(controller)
  });

  // Bulk update {{moduleName}}s
  fastify.put('/bulk', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Bulk update {{moduleName}}s',
      description: 'Update multiple {{moduleName}}s in one operation',
      body: BulkUpdateSchema(Update{{ModuleName}}Schema),
      response: {
        200: BulkResponseSchema({{ModuleName}}ResponseSchema),
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.update', 'admin'])
    ],
    handler: controller.bulkUpdate.bind(controller)
  });

  // Bulk delete {{moduleName}}s
  fastify.delete('/bulk', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Bulk delete {{moduleName}}s',
      description: 'Delete multiple {{moduleName}}s in one operation',
      body: BulkDeleteSchema,
      response: {
        200: BulkResponseSchema({{ModuleName}}ResponseSchema),
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.delete', 'admin'])
    ],
    handler: controller.bulkDelete.bind(controller)
  });

  {{#if hasStatusField}}
  // Bulk status update
  fastify.patch('/bulk/status', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Bulk update {{moduleName}} status',
      description: 'Update status of multiple {{moduleName}}s',
      body: BulkStatusSchema,
      response: {
        200: BulkResponseSchema({{ModuleName}}ResponseSchema),
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.update', 'admin'])
    ],
    handler: controller.bulkUpdateStatus.bind(controller)
  });

  // Activate {{moduleName}}
  fastify.patch('/:id/activate', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Activate {{moduleName}}',
      description: 'Activate a {{moduleName}} by setting is_active to true',
      params: {{ModuleName}}IdParamSchema,
      body: StatusToggleSchema,
      response: {
        200: {{ModuleName}}ResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        404: SchemaRefs.NotFound,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.update', 'admin'])
    ],
    handler: controller.activate.bind(controller)
  });

  // Deactivate {{moduleName}}
  fastify.patch('/:id/deactivate', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Deactivate {{moduleName}}',
      description: 'Deactivate a {{moduleName}} by setting is_active to false',
      params: {{ModuleName}}IdParamSchema,
      body: StatusToggleSchema,
      response: {
        200: {{ModuleName}}ResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        404: SchemaRefs.NotFound,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.update', 'admin'])
    ],
    handler: controller.deactivate.bind(controller)
  });

  // Toggle {{moduleName}} status
  fastify.patch('/:id/toggle', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Toggle {{moduleName}} status',
      description: 'Toggle the is_active status of a {{moduleName}}',
      params: {{ModuleName}}IdParamSchema,
      body: StatusToggleSchema,
      response: {
        200: {{ModuleName}}ResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        404: SchemaRefs.NotFound,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.update', 'admin'])
    ],
    handler: controller.toggle.bind(controller)
  });
  {{/if}}

  {{#if smartStats}}
  // Get {{moduleName}} statistics
  fastify.get('/stats', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Get {{moduleName}} statistics',
      description: 'Get statistical information about {{moduleName}}s',
      response: {
        200: StatisticsResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.read', 'admin'])
    ],
    handler: controller.getStats.bind(controller)
  });
  {{/if}}
{{/if}}

{{#if (eq package 'full')}}

  // ===== FULL PACKAGE ROUTES =====

  // Validate data before save
  fastify.post('/validate', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Validate {{moduleName}} data',
      description: 'Validate {{moduleName}} data before saving',
      body: ValidationRequestSchema(Create{{ModuleName}}Schema),
      response: {
        200: ValidationResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.create', '{{moduleName}}.update', 'admin'])
    ],
    handler: controller.validate.bind(controller)
  });

  // Check field uniqueness
  fastify.get('/check/:field', {
    schema: {
      tags: ['{{ModuleName}}'],
      summary: 'Check field uniqueness',
      description: 'Check if a field value is unique',
      params: UniquenessParamSchema,
      querystring: UniquenessQuerySchema,
      response: {
        200: UniquenessResponseSchema,
        400: SchemaRefs.ValidationError,
        401: SchemaRefs.Unauthorized,
        403: SchemaRefs.Forbidden,
        500: SchemaRefs.ServerError
      }
    },
    preValidation: [
      fastify.authenticate,
      fastify.authorize(['{{moduleName}}.read', 'admin'])
    ],
    handler: controller.checkUniqueness.bind(controller)
  });
{{/if}}

}