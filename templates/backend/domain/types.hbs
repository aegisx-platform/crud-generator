// Import and re-export types from schemas for convenience
import {
  type {{ModuleName}},
  type Create{{ModuleName}},
  type Update{{ModuleName}},
  type {{ModuleName}}IdParam,
  type Get{{ModuleName}}Query,
  type List{{ModuleName}}Query{{#if withEvents}},
  type {{ModuleName}}CreatedEvent,
  type {{ModuleName}}UpdatedEvent,
  type {{ModuleName}}DeletedEvent{{/if}}
} from '../schemas/{{toKebabCase currentRoute.camelName}}.schemas';

export {
  type {{ModuleName}},
  type Create{{ModuleName}},
  type Update{{ModuleName}},
  type {{ModuleName}}IdParam,
  type Get{{ModuleName}}Query,
  type List{{ModuleName}}Query{{#if withEvents}},
  type {{ModuleName}}CreatedEvent,
  type {{ModuleName}}UpdatedEvent,
  type {{ModuleName}}DeletedEvent{{/if}}
};

// Additional type definitions
export interface {{ModuleName}}Repository {
  create(data: Create{{ModuleName}}): Promise<{{ModuleName}}>;
  findById(id: number | string): Promise<{{ModuleName}} | null>;
  findMany(query: List{{ModuleName}}Query): Promise<{
    data: {{ModuleName}}[];
    pagination: {
      page: number;
      limit: number;
      total: number;
      totalPages: number;
    };
  }>;
  update(id: number | string, data: Update{{ModuleName}}): Promise<{{ModuleName}} | null>;
  delete(id: number | string): Promise<boolean>;
}

{{#if withEvents}}
// Real-time event type definitions
export interface {{ModuleName}}EventHandlers {
  onCreated?: (data: {{ModuleName}}) => void | Promise<void>;
  onUpdated?: (data: {{ModuleName}}) => void | Promise<void>;
  onDeleted?: (data: { id: number | string }) => void | Promise<void>;
}

export interface {{ModuleName}}WebSocketSubscription {
  subscribe(handlers: {{ModuleName}}EventHandlers): void;
  unsubscribe(): void;
}
{{/if}}

// Database entity type (matches database table structure exactly)
export interface {{ModuleName}}Entity {
  {{#each columns}}
  {{name}}: {{{raw tsType}}}{{#if isNullable}} | null{{/if}};
  {{/each}}
}

// ===== ERROR HANDLING: ERROR CODES =====
/**
 * Error codes for {{ModuleName}} module
 * Auto-generated based on database constraints and business rules
 */
export enum {{ModuleName}}ErrorCode {
  // Standard errors
  NOT_FOUND = '{{uppercase tableName}}_NOT_FOUND',
  VALIDATION_ERROR = '{{uppercase tableName}}_VALIDATION_ERROR',

  {{#if hasUniqueConstraints}}
  // Duplicate errors (409 Conflict)
  {{#each uniqueConstraints.singleField}}
  DUPLICATE_{{uppercase this}} = '{{uppercase ../tableName}}_DUPLICATE_{{uppercase this}}',
  {{/each}}
  {{#each uniqueConstraints.composite}}
  DUPLICATE_{{#each this}}{{uppercase this}}{{#unless @last}}_{{/unless}}{{/each}} = '{{uppercase ../../tableName}}_DUPLICATE_{{#each this}}{{uppercase this}}{{#unless @last}}_{{/unless}}{{/each}}',
  {{/each}}
  {{/if}}

  {{#if hasForeignKeyReferences}}
  // Delete validation errors (422 Unprocessable Entity)
  CANNOT_DELETE_HAS_REFERENCES = '{{uppercase tableName}}_CANNOT_DELETE_HAS_REFERENCES',
  {{#each foreignKeyReferences}}
  CANNOT_DELETE_HAS_{{uppercase table}} = '{{uppercase ../tableName}}_CANNOT_DELETE_HAS_{{uppercase table}}',
  {{/each}}
  {{/if}}

  {{#if hasBusinessRules}}
  // Business rule validation errors (422)
  {{#each businessRules}}
  {{errorCode}}_{{uppercase field}} = '{{uppercase @root.tableName}}_{{errorCode}}_{{uppercase field}}',
  {{/each}}
  {{/if}}
}

/**
 * Error messages mapped to error codes
 */
export const {{ModuleName}}ErrorMessages: Record<{{ModuleName}}ErrorCode, string> = {
  [{{ModuleName}}ErrorCode.NOT_FOUND]: '{{ModuleName}} not found',
  [{{ModuleName}}ErrorCode.VALIDATION_ERROR]: '{{ModuleName}} validation failed',

  {{#if hasUniqueConstraints}}
  // Duplicate error messages
  {{#each uniqueConstraints.singleField}}
  [{{../ModuleName}}ErrorCode.DUPLICATE_{{uppercase this}}]: '{{titleCase this}} already exists',
  {{/each}}
  {{#each uniqueConstraints.composite}}
  [{{../../ModuleName}}ErrorCode.DUPLICATE_{{#each this}}{{uppercase this}}{{#unless @last}}_{{/unless}}{{/each}}]: '{{#each this}}{{titleCase this}}{{#unless @last}} and {{/unless}}{{/each}} combination already exists',
  {{/each}}
  {{/if}}

  {{#if hasForeignKeyReferences}}
  // Delete validation messages
  [{{ModuleName}}ErrorCode.CANNOT_DELETE_HAS_REFERENCES]: 'Cannot delete {{moduleName}} - has related records',
  {{#each foreignKeyReferences}}
  [{{../ModuleName}}ErrorCode.CANNOT_DELETE_HAS_{{uppercase table}}]: 'Cannot delete {{../moduleName}} - has {{table}} references',
  {{/each}}
  {{/if}}

  {{#if hasBusinessRules}}
  // Business rule messages
  {{#each businessRules}}
  [{{@root.ModuleName}}ErrorCode.{{errorCode}}_{{uppercase field}}]: '{{message}}',
  {{/each}}
  {{/if}}
};