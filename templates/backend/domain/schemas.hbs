import { Type, Static } from '@sinclair/typebox';
import { 
  UuidParamSchema, 
  PaginationQuerySchema, 
  ApiErrorResponseSchema,
  ApiSuccessResponseSchema,
  PaginatedResponseSchema,
  PartialPaginatedResponseSchema{{#if (or (eq package 'enterprise') (eq package 'full'))}},
  DropdownOptionSchema,
  BulkCreateSchema,
  BulkUpdateSchema,
  BulkDeleteSchema,
  BulkStatusSchema,
  StatusToggleSchema,
  StatisticsSchema{{/if}}{{#if (eq package 'full')}},
  ValidationRequestSchema,
  UniquenessCheckSchema{{/if}} 
} from '../../../schemas/base.schemas';

// Base {{ModuleName}} Schema
export const {{ModuleName}}Schema = Type.Object({
  {{#each columns}}
  {{name}}: {{{raw typeboxType}}}{{#unless @last}},{{/unless}}
  {{/each}}
});

// Create Schema (without auto-generated fields)
export const Create{{ModuleName}}Schema = Type.Object({
{{#each columns}}
{{#unless isPrimaryKey}}
{{#unless (eq name 'created_at')}}
{{#unless (eq name 'updated_at')}}
{{#unless (eq name 'created_by')}}
{{#unless (eq name 'updated_by')}}
  {{name}}: {{{raw typeboxType}}},
{{/unless}}
{{/unless}}
{{/unless}}
{{/unless}}
{{/unless}}
{{/each}}
{{#each columns}}
{{#if (eq name 'created_by')}}
  // created_by is auto-filled from JWT token
  created_by: Type.Optional(Type.String({ format: 'uuid', description: 'User who created this record (auto-filled from JWT)' })),
{{/if}}
{{/each}}
});

// Update Schema (partial, without auto-generated fields)
export const Update{{ModuleName}}Schema = Type.Partial(
  Type.Object({
{{#each columns}}
{{#unless isPrimaryKey}}
{{#unless (eq name 'created_at')}}
{{#unless (eq name 'updated_at')}}
{{#unless (eq name 'created_by')}}
{{#unless (eq name 'updated_by')}}
    {{name}}: {{{raw typeboxType}}},
{{/unless}}
{{/unless}}
{{/unless}}
{{/unless}}
{{/unless}}
{{/each}}
{{#each columns}}
{{#if (eq name 'updated_by')}}
    // updated_by is auto-filled from JWT token
    updated_by: Type.String({ format: 'uuid', description: 'User who updated this record (auto-filled from JWT)' }),
{{/if}}
{{/each}}
  })
);

// ID Parameter Schema
export const {{ModuleName}}IdParamSchema = Type.Object({
  id: Type.Union([Type.String(), Type.Number()])
});

// Query Schemas
export const Get{{ModuleName}}QuerySchema = Type.Object({
  include: Type.Optional(Type.Union([
    Type.String(),
    Type.Array(Type.String())
  ]))
});

export const List{{ModuleName}}QuerySchema = Type.Object({
  // Pagination parameters
  page: Type.Optional(Type.Number({ minimum: 1, default: 1 })),
  limit: Type.Optional(Type.Number({ minimum: 1, maximum: 1000, default: 20 })),
  // Modern multiple sort support
  sort: Type.Optional(Type.String({
    pattern: '^[a-zA-Z_][a-zA-Z0-9_]*(:(asc|desc))?(,[a-zA-Z_][a-zA-Z0-9_]*(:(asc|desc))?)*$',
    description: 'Multiple sort: field1:desc,field2:asc,field3:desc. Example: {{#each columns}}{{#if @first}}{{name}}:asc{{/if}}{{/each}},created_at:desc',
    examples: [{{#each columns}}{{#if @first}}'{{name}}:asc'{{/if}}{{/each}}, 'created_at:desc'{{#each columns}}{{#if (eq @index 1)}}, '{{name}}:asc,created_at:desc'{{/if}}{{/each}}]
  })),
  
  // Search and filtering
  search: Type.Optional(Type.String({ minLength: 1, maxLength: 100 })),
  
  // üõ°Ô∏è Secure field selection with validation
  fields: Type.Optional(Type.Array(
    Type.String({ 
      pattern: '^[a-zA-Z_][a-zA-Z0-9_]*$', // Only alphanumeric + underscore
      minLength: 1,
      maxLength: 50 
    }), 
    { 
      minItems: 1,
      maxItems: 20, // Prevent excessive field requests
      description: 'Specific fields to return. Example: ["id", {{#each columns}}{{#if (eq @index 1)}}"{{name}}"{{/if}}{{/each}}, "created_at"]. Field access is role-based for security.'
    }
  )),
  
  // Include related data (only if table has foreign keys)
  {{#if (hasForeignKeys schema)}}
  include: Type.Optional(Type.Union([
    Type.String(),
    Type.Array(Type.String())
  ])),
  {{/if}}
  
  // Smart field-based filters
  {{#each columns}}
  {{#unless (or isPrimaryKey (eq name 'created_at') (eq name 'updated_at'))}}
  {{#if (isExactMatchField this)}}
  {{name}}: Type.Optional({{#if (eq tsType 'boolean')}}Type.Boolean(){{else if (eq tsType 'string')}}Type.String({{{getFieldConstraints this}}}){{else if (eq tsType 'number')}}Type.Number({{{getFieldConstraints this}}}){{/if}}),
  {{/if}}
  {{#if (isRangeField this)}}
  {{name}}_min: Type.Optional({{#if (eq tsType 'number')}}Type.Number({{{getFieldConstraints this}}}){{else if (eq type 'date')}}Type.String({ format: 'date' }){{else if (eq tsType 'Date')}}Type.String({ format: 'date-time' }){{/if}}),
  {{name}}_max: Type.Optional({{#if (eq tsType 'number')}}Type.Number({{{getFieldConstraints this}}}){{else if (eq type 'date')}}Type.String({ format: 'date' }){{else if (eq tsType 'Date')}}Type.String({ format: 'date-time' }){{/if}}),
  {{/if}}
  {{/unless}}
  {{/each}}
});

// Response Schemas using base wrappers
export const {{ModuleName}}ResponseSchema = ApiSuccessResponseSchema({{ModuleName}}Schema);
export const {{ModuleName}}ListResponseSchema = PaginatedResponseSchema({{ModuleName}}Schema);

// Partial Schemas for field selection support
export const Partial{{ModuleName}}Schema = Type.Partial({{ModuleName}}Schema);
export const Flexible{{ModuleName}}ListResponseSchema = PartialPaginatedResponseSchema({{ModuleName}}Schema);

// Export types
export type {{ModuleName}} = Static<typeof {{ModuleName}}Schema>;
export type Create{{ModuleName}} = Static<typeof Create{{ModuleName}}Schema>;
export type Update{{ModuleName}} = Static<typeof Update{{ModuleName}}Schema>;
export type {{ModuleName}}IdParam = Static<typeof {{ModuleName}}IdParamSchema>;
export type Get{{ModuleName}}Query = Static<typeof Get{{ModuleName}}QuerySchema>;
export type List{{ModuleName}}Query = Static<typeof List{{ModuleName}}QuerySchema>;

// Partial types for field selection
export type Partial{{ModuleName}} = Static<typeof Partial{{ModuleName}}Schema>;
export type Flexible{{ModuleName}}List = Static<typeof Flexible{{ModuleName}}ListResponseSchema>;

{{#if withEvents}}
// WebSocket Event Schemas
export const {{ModuleName}}CreatedEventSchema = Type.Object({
  type: Type.Literal('{{moduleName}}.created'),
  data: {{ModuleName}}Schema
});

export const {{ModuleName}}UpdatedEventSchema = Type.Object({
  type: Type.Literal('{{moduleName}}.updated'),
  data: {{ModuleName}}Schema
});

export const {{ModuleName}}DeletedEventSchema = Type.Object({
  type: Type.Literal('{{moduleName}}.deleted'),
  data: Type.Object({
    id: Type.Union([Type.String(), Type.Number()])
  })
});

export type {{ModuleName}}CreatedEvent = Static<typeof {{ModuleName}}CreatedEventSchema>;
export type {{ModuleName}}UpdatedEvent = Static<typeof {{ModuleName}}UpdatedEventSchema>;
export type {{ModuleName}}DeletedEvent = Static<typeof {{ModuleName}}DeletedEventSchema>;
{{/if}}

{{#if withImport}}
// ===== IMPORT SCHEMAS =====

// Execute Import Request Schema
export const ExecuteImportRequestSchema = Type.Object({
  sessionId: Type.String({ format: 'uuid', description: 'Session ID from validate response' }),
  options: Type.Optional(Type.Object({
    skipErrors: Type.Optional(Type.Boolean({ description: 'Skip rows with errors and import only valid rows' })),
    updateExisting: Type.Optional(Type.Boolean({ description: 'Update existing records if found' })),
  })),
});

// Validate Import API Response Schema
export const ValidateImportApiResponseSchema = ApiSuccessResponseSchema(
  Type.Object({
    sessionId: Type.String({ format: 'uuid' }),
    summary: Type.Object({
      totalRows: Type.Number(),
      validRows: Type.Number(),
      invalidRows: Type.Number(),
      warnings: Type.Number(),
    }),
    errors: Type.Array(Type.Object({
      row: Type.Number(),
      field: Type.Optional(Type.String()),
      message: Type.String(),
      value: Type.Optional(Type.Any()),
    })),
    warnings: Type.Array(Type.Object({
      row: Type.Number(),
      field: Type.Optional(Type.String()),
      message: Type.String(),
      value: Type.Optional(Type.Any()),
    })),
    preview: Type.Array(Type.Any()),
  })
);

// Execute Import API Response Schema
export const ExecuteImportApiResponseSchema = ApiSuccessResponseSchema(
  Type.Object({
    jobId: Type.String({ format: 'uuid' }),
    status: Type.String({ enum: ['processing', 'completed', 'failed'] }),
    message: Type.String(),
  })
);

// Import Status API Response Schema
export const ImportStatusApiResponseSchema = ApiSuccessResponseSchema(
  Type.Object({
    jobId: Type.String({ format: 'uuid' }),
    status: Type.String({ enum: ['pending', 'processing', 'completed', 'failed', 'cancelled'] }),
    progress: Type.Number({ description: 'Progress percentage (0-100)' }),
    totalRecords: Type.Number(),
    processedRecords: Type.Number(),
    successCount: Type.Number(),
    failedCount: Type.Number(),
    startedAt: Type.String({ format: 'date-time' }),
    completedAt: Type.Optional(Type.String({ format: 'date-time' })),
    error: Type.Optional(Type.String()),
  })
);

// Export Import Types
export type ExecuteImportRequest = Static<typeof ExecuteImportRequestSchema>;
export type ValidateImportApiResponse = Static<typeof ValidateImportApiResponseSchema>;
export type ExecuteImportApiResponse = Static<typeof ExecuteImportApiResponseSchema>;
export type ImportStatusApiResponse = Static<typeof ImportStatusApiResponseSchema>;
{{/if}}