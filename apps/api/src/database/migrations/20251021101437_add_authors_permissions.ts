import type { Knex } from 'knex';

/**
 * Migration: Add Authors permissions and roles
 * Generated by CRUD Generator on 2025-10-21T10:14:37.335Z
 */

export async function up(knex: Knex): Promise<void> {
  console.log('🔐 Adding Authors permissions and roles...');

  // Insert permissions for authors
  const permissions = [
    {
      description: 'Create authors',
      resource: 'authors',
      action: 'create',
      created_at: new Date(),
      updated_at: new Date(),
    },
    {
      description: 'Read authors',
      resource: 'authors',
      action: 'read',
      created_at: new Date(),
      updated_at: new Date(),
    },
    {
      description: 'Update authors',
      resource: 'authors',
      action: 'update',
      created_at: new Date(),
      updated_at: new Date(),
    },
    {
      description: 'Delete authors',
      resource: 'authors',
      action: 'delete',
      created_at: new Date(),
      updated_at: new Date(),
    },
  ];

  console.log(`📝 Inserting ${permissions.length} permissions for authors...`);
  await knex('permissions')
    .insert(permissions)
    .onConflict(['resource', 'action'])
    .ignore();

  // Insert roles for authors
  const roles = [
    {
      name: 'authors',
      description: 'Access to authors',
      created_at: new Date(),
      updated_at: new Date(),
    },
  ];

  console.log(`🏷️  Inserting ${roles.length} roles for authors...`);
  await knex('roles').insert(roles).onConflict('name').ignore();

  // Link role permissions
  // authors role permissions
  const mainRole = await knex('roles').where('name', 'authors').first();
  if (mainRole) {
    const mainPermissions = await knex('permissions')
      .where('resource', 'authors')
      .whereIn('action', ['create', 'read', 'update', 'delete'])
      .select('id');

    if (mainPermissions.length > 0) {
      const rolePermissions = mainPermissions.map((p) => ({
        role_id: mainRole.id,
        permission_id: p.id,
        created_at: new Date(),
      }));

      console.log(
        `🔗 Linking ${mainPermissions.length} permissions to authors role...`,
      );
      await knex('role_permissions')
        .insert(rolePermissions)
        .onConflict(['role_id', 'permission_id'])
        .ignore();
    }
  }

  console.log('✅ Authors permissions and roles added successfully');
}

export async function down(knex: Knex): Promise<void> {
  console.log('🗑️  Removing Authors permissions and roles...');

  // Remove role permissions first
  const roleIds = await knex('roles').whereIn('name', ['authors']).pluck('id');

  if (roleIds.length > 0) {
    console.log(`🔗 Removing role permissions for authors...`);
    await knex('role_permissions').whereIn('role_id', roleIds).del();
  }

  // Remove roles
  console.log(`🏷️  Removing authors role...`);
  const deletedRoles = await knex('roles').whereIn('name', ['authors']).del();

  // Remove permissions
  console.log(`📝 Removing authors permissions...`);
  const deletedPermissions = await knex('permissions')
    .where('resource', 'authors')
    .del();

  console.log(
    `✅ Removed ${deletedRoles} roles and ${deletedPermissions} permissions for authors`,
  );
}
